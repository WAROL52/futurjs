// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator dbSchema {
  provider = "npx bun@latest ./src/bin/dbSchema.ts"
  output   = "../src/generated/dbSchema.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  STAFF
  GUEST
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

model Home {
  id_home   String   @id @default(cuid()) @map("id")
  updatedAt DateTime @updatedAt
  name      String
  users     User[]
}

model User {
  id_user      String         @id @default(cuid()) @map("id")
  email        String         @unique
  name         String
  password     String
  role         UserRole       @default(USER)
  profile      Profile?
  posts        Post[]
  orders       Order[]
  createdAt    DateTime       @default(now())
  Comment      Comment[]
  Notification Notification[]
  Address      Address[]
  AuditLog     AuditLog[]
  isActive     Boolean        @default(true)
  roles        UserRole[]
  homes        Home[]
}

model Profile {
  id_profile String  @id @default(cuid()) @map("id")
  bio        String?
  user       User    @relation(fields: [userId], references: [id_user])
  userId     String  @unique
  avatar     Media?  @relation(fields: [avatarId], references: [id_media])
  avatarId   String?
}

model Post {
  id_post   String    @id @default(cuid()) @map("id")
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id_user])
  authorId  String
  tags      Tag[]     @relation("PostTags")
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Comment {
  id_comment String   @id @default(cuid()) @map("id")
  text       String
  post       Post     @relation(fields: [postId], references: [id_post])
  postId     String
  author     User     @relation(fields: [authorId], references: [id_user])
  authorId   String
  createdAt  DateTime @default(now())
}

model Tag {
  id_tag String @id @default(cuid()) @map("id")
  name   String @unique
  posts  Post[] @relation("PostTags")
}

model Category {
  id_category String    @id @default(cuid()) @map("id")
  name        String    @unique
  products    Product[]
}

model Product {
  id_product  String      @id @default(cuid()) @map("id")
  name        String
  price       Float
  stock       Int
  description String?
  image       Media?      @relation(fields: [mediaId], references: [id_media])
  category    Category    @relation(fields: [categoryId], references: [id_category])
  categoryId  String
  orders      OrderItem[]
  mediaId     String?
}

model Order {
  id_order  String      @id @default(cuid()) @map("id")
  user      User        @relation(fields: [userId], references: [id_user])
  userId    String
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
}

model OrderItem {
  id_orderItem String  @id @default(cuid()) @map("id")
  order        Order   @relation(fields: [orderId], references: [id_order])
  orderId      String
  product      Product @relation(fields: [productId], references: [id_product])
  productId    String
  quantity     Int
  unitPrice    Float
}

model Media {
  id_media   String    @id @default(cuid()) @map("id")
  url        String
  type       String
  uploadedAt DateTime  @default(now())
  Profile    Profile[]
  Product    Product[]
}

model Notification {
  id_notification String   @id @default(cuid()) @map("id")
  title           String
  message         String
  user            User     @relation(fields: [userId], references: [id_user])
  userId          String
  read            Boolean  @default(false)
  createdAt       DateTime @default(now())
}

model Address {
  id_address String  @id @default(cuid()) @map("id")
  user       User    @relation(fields: [userId], references: [id_user])
  userId     String
  street     String
  city       String
  country    String
  zipCode    String
  isPrimary  Boolean @default(false)
}

model AuditLog {
  id_auditLog String   @id @default(cuid()) @map("id")
  action      String
  user        User?    @relation(fields: [userId], references: [id_user])
  userId      String?
  createdAt   DateTime @default(now())
  metadata    Json?
}
