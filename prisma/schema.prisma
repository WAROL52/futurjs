// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator dbSchema {
  provider = "npx bun@latest ./src/bin/dbSchema.ts"
  output   = "../src/generated/dbSchema.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  STAFF
  GUEST
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String
  password     String
  role         UserRole       @default(USER)
  profile      Profile?
  posts        Post[]
  orders       Order[]
  createdAt    DateTime       @default(now())
  Comment      Comment[]
  Notification Notification[]
  Address      Address[]
  AuditLog     AuditLog[]
  isActive     Boolean        @default(true)

  listStrings  String[]   @default([])
  listNumbers  Int[]      @default([])
  listBooleans Boolean[]  @default([])
  listDates    DateTime[] @default([])
}

model Profile {
  id       String  @id @default(cuid())
  bio      String?
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  avatar   Media?  @relation(fields: [avatarId], references: [id])
  avatarId String?
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  tags      Tag[]     @relation("PostTags")
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  price       Float
  stock       Int
  description String?
  image       Media?      @relation(fields: [mediaId], references: [id])
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  orders      OrderItem[]
  mediaId     String?
}

model Order {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  unitPrice Float
}

model Media {
  id         String    @id @default(cuid())
  url        String
  type       String
  uploadedAt DateTime  @default(now())
  Profile    Profile[]
  Product    Product[]
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Address {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  street    String
  city      String
  country   String
  zipCode   String
  isPrimary Boolean @default(false)
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  metadata  Json?
}
