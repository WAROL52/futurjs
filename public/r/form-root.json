{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-root",
  "type": "registry:component",
  "title": "FormRoot",
  "description": "",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/shared/auto-form/forms/form-root.tsx",
      "content": "\"use client\";\n\nimport { FormModel } from \"@/shared/prisma/hooks/use-prisma-schema\";\nimport { FieldAuto } from \"../field-scalars/field-auto\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod/v4\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nexport type FormRootProps = {\n  model: FormModel;\n  defaultValues?: object;\n  onSubmit: (data: object) => void;\n};\n\nexport function FormRoot({ model, defaultValues, onSubmit }: FormRootProps) {\n  const resolver = zodResolver(model.zodType);\n  const form = useForm<z.infer<typeof model.zodType>>({\n    resolver: async (val, ...ctx) => {\n      console.log(\"resolver\", val);\n      const result = resolver(val, ...ctx);\n      console.log(\"result\", await result);\n\n      return result;\n    },\n    defaultValues: defaultValues,\n  });\n  return (\n    <div>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-1\">\n          {model.fields.map((field) => {\n            return (\n              <FieldAuto\n                key={field.props.name}\n                fieldSchema={field}\n                form={form}\n              />\n            );\n          })}\n          <Button type=\"submit\">Submit</Button>\n        </form>\n      </Form>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "shared/auto-form/forms/form-root.tsx"
    }
  ]
}