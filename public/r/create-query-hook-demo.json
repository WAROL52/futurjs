{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "create-query-hook-demo",
  "type": "registry:file",
  "title": "create-query-hook-demo",
  "description": "demo",
  "dependencies": [],
  "registryDependencies": [
    "https://futurjs.vercel.app/r/create-query-hook.json"
  ],
  "files": [
    {
      "path": "src/_exemples/create-query-hook/demo/main.tsx",
      "content": "\"use client\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  useActionMutation,\n  useActionQuery,\n  useCreateUser,\n  useDeleteUser,\n  useGetUsers,\n  useResetUsers,\n} from \"./client\";\nimport { Button } from \"@/components/ui/button\";\nimport { FakeUser } from \"./action\";\n\nexport type MainProps = {};\n\nexport default function Main({}: MainProps) {\n  const { users, isGetting } = useGetUsers();\n  const { deleteUser, userIdDeleting, isDeleting } = useDeleteUser();\n  const { resetUsers, isResetting } = useResetUsers();\n  const { createUser, isCreating } = useCreateUser();\n  if (isGetting) {\n    return <div>Loading...</div>;\n  }\n  if (isResetting) {\n    return <div>Resetting...</div>;\n  }\n  return (\n    <div>\n      <h1>\n        Users List <Button onClick={() => resetUsers(0)}>reset</Button>{\" \"}\n      </h1>\n      <Card className=\"h-[200px] overflow-auto\">\n        <CardContent>\n          <ul>\n            {users.map((user) => (\n              <li key={user.id} className=\"mb-2\">\n                <strong>{user.name}</strong>- {user.age} - {user.email}{\" \"}\n                <Button\n                  variant=\"destructive\"\n                  size={\"sm\"}\n                  onClick={() => deleteUser(user.id)}\n                  disabled={isDeleting}\n                >\n                  {isDeleting && userIdDeleting === user.id\n                    ? \"Deleting...\"\n                    : \"Delete\"}\n                </Button>\n              </li>\n            ))}\n            {users.length === 0 && <li>No users found.</li>}\n          </ul>\n        </CardContent>\n      </Card>\n      <form\n        action={(data) => {\n          createUser({\n            name: data.get(\"name\") as string,\n            email: data.get(\"email\") as string,\n            age: Number(data.get(\"age\")) || (0 as number),\n            isActive: true,\n          });\n        }}\n        className=\"flex flex-col gap-2 my-4 border p-4 rounded-lg bg-muted/50\"\n      >\n        <input name=\"name\" type=\"text\" placeholder=\"Name\" />\n        <input name=\"email\" type=\"email\" placeholder=\"Email\" />\n        <input name=\"age\" type=\"number\" placeholder=\"Age\" />\n        <Button type=\"submit\">Create User</Button>\n      </form>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "exemples/create-query-hook/demo/main.tsx"
    },
    {
      "path": "src/_exemples/create-query-hook/demo/client.tsx",
      "content": "\"use client\";\nimport * as user from \"./action\";\nimport { createQueryHook } from \"@/shared/prisma/lib/create-query-hook\";\n\nexport const { useActionMutation, useActionQuery } = createQueryHook({\n  user,\n});\n\nexport function useGetUsers() {\n  const { data: users = [], isLoading: isGetting } = useActionQuery({\n    queryKey: [\"users\"],\n    queryFn: (db) => db.user.getUsers(),\n  });\n  return { users, isGetting };\n}\n\nexport function useDeleteUser() {\n  const {\n    mutate: deleteUser,\n    variables: userIdDeleting,\n    isPending: isDeleting,\n  } = useActionMutation({\n    invalidateOnSuccess: [[\"users\"]],\n    mutationFn: (id: string, db) => db.user.deleteUser(id),\n  });\n  return { deleteUser, userIdDeleting, isDeleting };\n}\n\nexport function useCreateUser() {\n  const { mutate: createUser, isPending: isCreating } = useActionMutation({\n    invalidateOnSuccess: [[\"users\"]],\n    mutationFn: (user: Omit<user.FakeUser, \"id\">, db) =>\n      db.user.createUser(user),\n  });\n  return { createUser, isCreating };\n}\n\nexport function useUpdateUser() {\n  const { mutate: updateUser, isPending: isUpdating } = useActionMutation({\n    invalidateOnSuccess: [[\"users\"]],\n    mutationFn: (args: { id: string; user: Partial<user.FakeUser> }, db) =>\n      db.user.updateUser(args),\n  });\n  return { updateUser, isUpdating };\n}\n\nexport function useResetUsers() {\n  const { mutate: resetUsers, isPending: isResetting } = useActionMutation({\n    mutationFn: (_, db) => db.user.resetUsers(),\n    invalidateOnSuccess: [[\"users\"]],\n  });\n  return { resetUsers, isResetting };\n}\n",
      "type": "registry:file",
      "target": "exemples/create-query-hook/demo/client.tsx"
    },
    {
      "path": "src/_exemples/create-query-hook/demo/action.tsx",
      "content": "\"use server\";\n\nexport type FakeUser = {\n  id: string;\n  name: string;\n  email: string;\n  age: number;\n  isActive: boolean;\n};\n\nexport async function getUsers() {\n  return data;\n}\n\nexport async function getUserById(id: string) {\n  return data.find((user) => user.id === id) || null;\n}\n\nexport async function createUser(user: Omit<FakeUser, \"id\">) {\n  const newUser: FakeUser = {\n    id: (data.length + 1).toString(),\n    ...user,\n  };\n  data.push(newUser);\n  return newUser;\n}\n\nexport async function updateUser({\n  id,\n  user,\n}: {\n  id: string;\n  user: Partial<FakeUser>;\n}) {\n  const index = data.findIndex((u) => u.id === id);\n  if (index === -1) {\n    return null;\n  }\n  const updatedUser = { ...data[index], ...user };\n  data[index] = updatedUser;\n  return updatedUser;\n}\n\nexport async function deleteUser(id: string) {\n  const index = data.findIndex((u) => u.id === id);\n  if (index === -1) {\n    return null;\n  }\n  const deletedUser = data[index];\n  data.splice(index, 1);\n  return deletedUser;\n}\nexport async function resetUsers() {\n  data.splice(0, data.length, ...dataDefault);\n\n  return data;\n}\n\nconst dataDefault: FakeUser[] = [\n  {\n    id: \"1\",\n    name: \"John Doe\",\n    email: \"john.doe@example.com\",\n    age: 30,\n    isActive: true,\n  },\n  {\n    id: \"2\",\n    name: \"Jane Smith\",\n    email: \"jane.smith@example.com\",\n    age: 25,\n    isActive: false,\n  },\n  {\n    id: \"3\",\n    name: \"Alice Johnson\",\n    email: \"alice.johnson@example.com\",\n    age: 28,\n    isActive: true,\n  },\n];\n\nconst data = [...dataDefault];\n",
      "type": "registry:file",
      "target": "exemples/create-query-hook/demo/action.tsx"
    }
  ]
}