{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "field-root",
  "type": "registry:component",
  "title": "FieldRoot",
  "description": "",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/shared/auto-form/field-scalars/field-root.tsx",
      "content": "\"use client\";\n\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { FormModelField } from \"@/shared/prisma/hooks/use-prisma-schema\";\nimport { ControllerRenderProps, UseFormReturn } from \"react-hook-form\";\n\nexport type FieldRootRenderProps = {\n  fieldSchema: FormModelField;\n  form: UseFormReturn<Record<string, any>, any, Record<string, any>>;\n  field: ControllerRenderProps<Record<string, any>, string>;\n};\nexport type FieldRootProps = {\n  fieldSchema: FormModelField;\n  form: UseFormReturn<Record<string, any>, any, Record<string, any>>;\n  render?: (field: FieldRootRenderProps) => React.ReactNode;\n  inputProps?: React.ComponentProps<\"input\">;\n};\n\nexport function FieldRoot({\n  fieldSchema,\n  form,\n  render,\n  inputProps,\n}: FieldRootProps) {\n  return (\n    <FormField\n      control={form.control}\n      name={fieldSchema.props.name}\n      render={({ field }) => {\n        const fieldInfo = getFieldInfo({ fieldSchema, form, field });\n        return (\n          <>\n            {render ? (\n              render({ fieldSchema: fieldSchema, form, field })\n            ) : (\n              <FormItem>\n                <FormLabel>{fieldInfo.label}</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    placeholder={fieldInfo.placeholder}\n                    {...inputProps}\n                  />\n                </FormControl>\n                <FormDescription>{fieldInfo.description}</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          </>\n        );\n      }}\n    />\n  );\n}\n\nexport function getFieldInfo(field: FieldRootRenderProps) {\n  return {\n    name: field.fieldSchema.props.name,\n    description: field.fieldSchema.meta?.description || \"\",\n    label: field.fieldSchema.meta?.label || field.fieldSchema.props.name,\n    placeholder: field.fieldSchema.meta?.placeholder || \"\",\n    required: field.fieldSchema.props.isRequired || false,\n  };\n}\n",
      "type": "registry:component",
      "target": "shared/auto-form/field-scalars/field-root.tsx"
    }
  ]
}