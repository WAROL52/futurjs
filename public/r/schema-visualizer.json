{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "schema-visualizer",
  "type": "registry:component",
  "title": "SchemaVisualizer",
  "description": "",
  "dependencies": [
    "@tanstack/react-query",
    "@xyflow/react",
    "lucide-react"
  ],
  "registryDependencies": [
    "dropdown-menu",
    "tooltip",
    "button"
  ],
  "files": [
    {
      "path": "src/shared/prisma/block/schema-visualizer.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useRef } from \"react\";\nimport {\n  ReactFlow,\n  ReactFlowProvider,\n  Background,\n  useNodesState,\n  useEdgesState,\n  Panel,\n  useReactFlow,\n  BackgroundVariant,\n  Edge,\n  Node,\n  Handle,\n  Position,\n  NodeProps,\n  BaseEdge,\n  EdgeProps,\n  getSmoothStepPath,\n} from \"@xyflow/react\";\nimport \"@xyflow/react/dist/base.css\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Prisma } from \"@/generated/prisma\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nimport { useState } from \"react\";\n\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Fullscreen, Minus, MoreVertical, Plus } from \"lucide-react\";\n\nSchemaVisualizer.dependencies = [\n  \"@tanstack/react-query\",\n  \"@xyflow/react\",\n  \"lucide-react\",\n];\n\nSchemaVisualizer.shadcnDependencies = [\"dropdown-menu\", \"tooltip\", \"button\"];\n\nconst edgeTypes = {\n  custom: SchemaEdge,\n};\nexport interface TableField {\n  name: string;\n  type: string;\n  isPrimary?: boolean;\n  isForeign?: boolean;\n  meta?: Prisma.DMMF.Field;\n}\n\ninterface TableNodeData extends Record<string, unknown> {\n  label: string;\n  fields: TableField[];\n  selected?: boolean;\n  sourceConnections: string[];\n  targetConnections: string[];\n}\n\ntype TableNodeType = Node<TableNodeData, \"tableNode\">;\n\nexport type SchemaVisualizerProps = {\n  initialNodes: Node[];\n  initialEdges: Edge[];\n};\nfunction FieldName({\n  field,\n  withTooltip,\n}: {\n  field: TableField;\n  withTooltip?: boolean;\n}) {\n  const fieldName = (\n    <span>\n      {field.isForeign && <span title=\"Foreign key\">‚õìÔ∏è</span>}\n      {field.isPrimary && <span title=\"Primary key\">üîë</span>}\n      {field.meta?.kind === \"object\" && (\n        <span className=\"text-blue-400\" title=\"Virtual field\">\n          üîó\n        </span>\n      )}\n      <span>{field.name}</span>\n    </span>\n  );\n  if (!withTooltip) {\n    return fieldName;\n  }\n  return (\n    <TooltipProvider delayDuration={0}>\n      <Tooltip>\n        <TooltipTrigger asChild>{fieldName}</TooltipTrigger>\n        <TooltipContent className=\"py-3 w-50 bg-muted text-foreground border\">\n          <div className=\"space-y-1\">\n            <p className=\"text-[13px] font-medium border-b\">\n              <div className=\"flex items-center justify-between gap-2 py-2 border-dashed group-not-last:border-b\">\n                <span className=\"truncate font-medium\">{fieldName}</span>\n                <span className=\"text-muted-foreground/60\">\n                  {field.type}\n                  {field.meta?.isUnique && (\n                    <span className=\"text-blue-400\" title=\"Unique field\">\n                      !\n                    </span>\n                  )}\n                  {field.meta?.isRequired === false && (\n                    <span className=\"text-blue-400\" title=\"Optional field\">\n                      ?\n                    </span>\n                  )}\n                  {field.meta?.isList && (\n                    <span className=\"text-blue-400\" title=\"List field\">\n                      []\n                    </span>\n                  )}\n                </span>\n              </div>\n            </p>\n            {field.meta?.documentation?.split(\"\\\\n\").map((line, index) => (\n              <p\n                key={index}\n                className=\"text-xs text-muted-foreground border-b border-dashed\"\n              >\n                {line}\n              </p>\n            ))}\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n\ntype Checked = boolean;\nfunction TableNode({ data, id }: NodeProps<TableNodeType>) {\n  const [withTooltip, setWithTooltip] = useState<Checked>(false);\n  const [showVirtualField, setShowVirtualField] = useState<Checked>(false);\n  return (\n    <div\n      className={cn(\n        \"rounded-xl bg-card shadow-[0_1px_1px_rgba(0,0,0,0.02),_0_2px_2px_rgba(0,0,0,0.02),_0_4px_4px_rgba(0,0,0,0.02),_0_8px_8px_rgba(0,0,0,0.02),_0_16px_16px_rgba(0,0,0,0.02),_0_32px_32px_rgba(0,0,0,0.02)] w-66 font-mono\",\n        data.selected ? \"ring-2 ring-primary ring-offset-2\" : \"\"\n      )}\n      style={{\n        border: `.5px solid ${data.color || \"#888\"}`,\n      }}\n    >\n      <div className=\"flex items-center justify-between px-4 py-3 border-b border-border/80 bg-gradient-to-t from-background/70 dark:from-background/30\">\n        <div className=\"flex items-center gap-2 text-[13px]\">\n          <span\n            className=\"w-2 h-2 rounded-full\"\n            style={{ background: String(data.color) }}\n          />\n          <span className=\"text-muted-foreground/80\">/</span>{\" \"}\n          <span className=\"font-medium\">{data.label}</span>\n        </div>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"shadow-none hover:bg-transparent -my-2 -me-2 text-muted-foreground/60 hover:text-muted-foreground\"\n              aria-label=\"Open edit menu\"\n            >\n              <MoreVertical className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            <DropdownMenuCheckboxItem\n              checked={withTooltip}\n              onCheckedChange={setWithTooltip}\n            >\n              Show field tooltips\n            </DropdownMenuCheckboxItem>\n            <DropdownMenuCheckboxItem\n              checked={showVirtualField}\n              onCheckedChange={setShowVirtualField}\n            >\n              Show virtual fields\n            </DropdownMenuCheckboxItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"text-xs py-2\">\n        {data.fields\n          .filter((field) => {\n            if (showVirtualField) return true;\n            return field.meta?.kind !== \"object\";\n          })\n          .map((field: TableField) => {\n            const isPrimaryConnection =\n              field.isPrimary && data.sourceConnections.includes(field.name);\n            const isForeignConnection =\n              field.isForeign && data.targetConnections.includes(field.name);\n            return (\n              <div key={field.name} className=\"px-4 relative group\">\n                <div className=\"flex items-center justify-between gap-2 py-2 border-dashed group-not-last:border-b\">\n                  <span className=\"truncate font-medium\">\n                    <FieldName field={field} withTooltip={withTooltip} />\n                  </span>\n                  <span className=\"text-muted-foreground/60\">\n                    {field.type}\n                    {field.meta?.isUnique && (\n                      <span className=\"text-blue-400\" title=\"Unique field\">\n                        !\n                      </span>\n                    )}\n                    {field.meta?.isRequired === false && (\n                      <span className=\"text-blue-400\" title=\"Optional field\">\n                        ?\n                      </span>\n                    )}\n                    {field.meta?.isList && (\n                      <span className=\"text-blue-400\" title=\"List field\">\n                        []\n                      </span>\n                    )}\n                  </span>\n\n                  {/* Field handles */}\n                  {(isPrimaryConnection || isForeignConnection) && (\n                    <Handle\n                      type={field.isPrimary ? \"source\" : \"target\"}\n                      position={\n                        field.isPrimary ? Position.Left : Position.Right\n                      }\n                      id={field.name}\n                      className=\"size-2.5 rounded-full bg-foreground! border-2 border-background\"\n                      isConnectable={false}\n                    />\n                  )}\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\nconst { nodeTypes } = {\n  nodeTypes: {\n    tableNode: TableNode,\n  },\n};\nfunction SchemaVisualizerInner({\n  initialNodes,\n  initialEdges,\n}: SchemaVisualizerProps) {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const reactFlowWrapper = useRef<HTMLDivElement>(null);\n  const { fitView, zoomIn, zoomOut } = useReactFlow();\n\n  useEffect(() => setNodes(initialNodes), [initialNodes, setNodes]);\n  useEffect(() => setEdges(initialEdges), [initialEdges, setEdges]);\n\n  const onFitView = useCallback(() => {\n    fitView({ padding: 0.2 });\n  }, [fitView]);\n\n  return (\n    <main className=\"flex-1 flex items-stretch\">\n      <div className=\"w-full\" ref={reactFlowWrapper}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          nodeTypes={nodeTypes}\n          edgeTypes={edgeTypes}\n          fitView\n          minZoom={0.5}\n          maxZoom={1}\n          defaultEdgeOptions={{\n            type: \"custom\",\n            className: \"opacity-25\",\n          }}\n          style={\n            {\n              \"--xy-background-pattern-dots-color-default\":\n                \"var(--color-border)\",\n              \"--xy-edge-stroke-width-default\": 1.5,\n              \"--xy-edge-stroke-default\": \"var(--color-foreground)\",\n              \"--xy-edge-stroke-selected-default\": \"var(--color-foreground)\",\n              \"--xy-attribution-background-color-default\": \"transparent\",\n            } as React.CSSProperties\n          }\n          attributionPosition=\"bottom-left\"\n        >\n          <Background variant={BackgroundVariant.Dots} gap={20} size={2} />\n\n          <Panel\n            position=\"bottom-right\"\n            className=\"inline-flex -space-x-px rounded-md shadow-xs rtl:space-x-reverse\"\n          >\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"text-muted-foreground/80 hover:text-muted-foreground rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg size-10 focus-visible:z-10 bg-card\"\n              onClick={() => zoomIn()}\n              aria-label=\"Zoom in\"\n            >\n              <Plus className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"text-muted-foreground/80 hover:text-muted-foreground rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg size-10 focus-visible:z-10 bg-card\"\n              onClick={() => zoomOut()}\n              aria-label=\"Zoom out\"\n            >\n              <Minus className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"text-muted-foreground/80 hover:text-muted-foreground rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg size-10 focus-visible:z-10 bg-card\"\n              onClick={onFitView}\n              aria-label=\"Fit view\"\n            >\n              <Fullscreen className=\"size-5\" aria-hidden=\"true\" />\n              {/* <RiFullscreenLine className=\"size-5\" aria-hidden=\"true\" /> */}\n            </Button>\n          </Panel>\n          {/* <MiniMap\n            nodeColor={(node) => (node.data as any)?.color || \"#999\"}\n            nodeStrokeWidth={2}\n            // maskColor=\"#00000010\"\n          /> */}\n        </ReactFlow>\n      </div>\n    </main>\n  );\n}\n\nexport function SchemaVisualizer(props: SchemaVisualizerProps) {\n  const { initialNodes, initialEdges } = props;\n\n  props.initialNodes.map((node) => {\n    if (node.type === \"tableNode\") {\n      const data = node.data as TableNodeData;\n\n      // Find all source connections for this node\n      const sourceConnections = initialEdges\n        .filter((edge) => edge.source === node.id)\n        .map((edge) => edge.sourceHandle);\n\n      // Find all target connections for this node\n      const targetConnections = initialEdges\n        .filter((edge) => edge.target === node.id)\n        .map((edge) => edge.targetHandle);\n\n      data.sourceConnections = sourceConnections as string[];\n      data.targetConnections = targetConnections as string[];\n    }\n  });\n  return (\n    <ReactFlowProvider>\n      <SchemaVisualizerInner\n        initialEdges={props.initialEdges}\n        initialNodes={props.initialNodes}\n      />\n    </ReactFlowProvider>\n  );\n}\n\nfunction SchemaEdge({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  markerEnd,\n}: EdgeProps) {\n  const [edgePath] = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    sourcePosition: sourcePosition || Position.Bottom,\n    targetX,\n    targetY,\n    targetPosition: targetPosition || Position.Top,\n    borderRadius: 8, // Increased border radius for smoother corners\n  });\n\n  return <BaseEdge path={edgePath} style={style} markerEnd={markerEnd} />;\n}\n",
      "type": "registry:component",
      "target": "shared/prisma/block/schema-visualizer.tsx"
    }
  ]
}