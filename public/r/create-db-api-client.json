{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "create-db-api-client",
  "type": "registry:lib",
  "title": "createDbApiClient",
  "description": "",
  "dependencies": [
    "axios"
  ],
  "registryDependencies": [
    "https://futurjs.vercel.app/r/create-query-hook.json"
  ],
  "files": [
    {
      "path": "src/shared/prisma/lib/create-db-api-client.ts",
      "content": "\"use client\";\nimport axios, { AxiosError } from \"axios\";\nimport {\n  ActionHandler,\n  createQueryHook,\n  createReducerQueryHook,\n} from \"./create-query-hook\";\nimport { PrismaClient } from \"@/generated/prisma\";\nimport {\n  MutateOptions,\n  MutationFunction,\n  useMutation,\n  UseMutationOptions,\n  UseMutationResult,\n  useQuery,\n  UseQueryOptions,\n  UseQueryResult,\n} from \"@tanstack/react-query\";\n\nexport type DbHookPrisma<T = any> = {\n  [K in keyof T as K extends `$${infer R}` ? never : K]: Omit<T[K], \"fields\">;\n};\n\nexport type DbConfig = {\n  baseUrl: string;\n};\n\nexport function createDbApiClient<T extends ActionHandler>(config: DbConfig) {\n  const dbClient = createProxy<T>(config);\n  const queryHook = createQueryHook(dbClient);\n  return {\n    useDbQuery: queryHook.useActionQuery,\n    useDbMutation: queryHook.useActionMutation,\n  };\n}\ncreateDbApiClient.registryDependencies = [\"create-query-hook\"];\ncreateDbApiClient.dependencies = [\"axios\"];\n\nfunction createProxy<T extends object>(config: DbConfig) {\n  return new Proxy(\n    {},\n    {\n      get: (_, modelName) => {\n        return new Proxy(\n          {},\n          {\n            get: (_, methodName) => {\n              return (args: Record<string, any>) => {\n                return fetchDbData(\n                  modelName as string,\n                  methodName as string,\n                  args,\n                  config\n                );\n              };\n            },\n          }\n        );\n      },\n    }\n  ) as T;\n}\n\nasync function fetchDbData<T>(\n  modelName: string,\n  methodName: string,\n  args: Record<string, any>,\n  config: DbConfig\n) {\n  if (!modelName || !methodName) {\n    throw new Error(\"Model name and method name must be provided.\");\n  }\n  try {\n    const res = await axios.post(\n      `${config.baseUrl}/${modelName}/${methodName}`,\n      {\n        args,\n      }\n    );\n    return res.data || null;\n  } catch (error) {\n    const axiosError = error as AxiosError;\n    throw new Error(\n      String(axiosError.response?.data || axiosError.message || String(error))\n    );\n  }\n}\n",
      "type": "registry:lib",
      "target": "shared/prisma/lib/create-db-api-client.ts"
    }
  ]
}