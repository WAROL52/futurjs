{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "field-list-root",
  "type": "registry:component",
  "title": "FieldListRoot",
  "description": "",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/shared/auto-form/field-lists/field-list-root.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport { useState, forwardRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  FormControl,\n  FormDescription,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { X, Plus, Edit2, Check, XIcon } from \"lucide-react\";\nimport {\n  FieldRootProps,\n  FieldRootRenderProps,\n  getFieldInfo,\n} from \"../field-scalars/field-root\";\nimport { FieldError } from \"react-hook-form\";\n\nexport type FieldListRootProps = FieldRootRenderProps & {\n  type?: React.InputHTMLAttributes<HTMLInputElement>[\"type\"];\n  convertValue?: (value: any) => any;\n  renderInput?: (props: {\n    value: any;\n    onValueChange: (value: any) => void;\n    name: string;\n    disabled?: boolean;\n    placeholder?: string;\n  }) => React.ReactNode;\n  renderItem?: (props: FieldRootRenderProps) => React.ReactNode;\n};\n\nexport function FieldListRoot(props: FieldListRootProps) {\n  const {\n    fieldSchema,\n    form,\n    field,\n    type,\n    convertValue,\n    renderInput: RenderInput,\n    renderItem: RenderItem,\n  } = props;\n  const [inputValue, setInputValue] = useState<any>();\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\n  const [editValue, setEditValue] = useState(\"\");\n  const allowDuplicates = fieldSchema.meta?.allowDuplicates || true;\n  const maxItems = fieldSchema.meta?.maxItems || 10;\n  const value = (field.value || []) as string[];\n  const { onChange: onChangeValue, onBlur, ref, disabled } = field;\n  console.log(field);\n\n  const onChange = (newValue: string[]) => {\n    if (convertValue) {\n      newValue = newValue.map(convertValue);\n    }\n    onChangeValue(newValue);\n  };\n  const { description, label, name, placeholder, required } = getFieldInfo({\n    fieldSchema,\n    form,\n    field,\n  });\n  const errors = (form.formState.errors[field.name] || []) as FieldError[];\n  const handleAddItem = () => {\n    const _inputValue =\n      typeof inputValue == \"string\" ? String(inputValue).trim() : inputValue;\n    if (typeof inputValue == \"string\" && !_inputValue.length) return;\n    if (disabled) return;\n\n    if (!allowDuplicates && value.includes(_inputValue)) {\n      return;\n    }\n\n    if (maxItems && value.length >= maxItems) {\n      return;\n    }\n\n    const newItems = [...value, _inputValue];\n    onChange?.(newItems);\n    setInputValue(undefined);\n  };\n\n  const handleRemoveItem = (index: number) => {\n    if (disabled) return;\n    const newItems = value.filter((_, i) => i !== index);\n    onChange?.(newItems);\n  };\n\n  const handleStartEdit = (index: number) => {\n    if (disabled) return;\n    setEditingIndex(index);\n    setEditValue(value[index]);\n  };\n\n  const handleSaveEdit = () => {\n    if (!editValue.trim() || editingIndex === null || disabled) return;\n\n    if (\n      !allowDuplicates &&\n      value.includes(editValue.trim()) &&\n      value[editingIndex] !== editValue.trim()\n    ) {\n      return;\n    }\n\n    const newItems = [...value];\n    newItems[editingIndex] = editValue.trim();\n    onChange?.(newItems);\n    setEditingIndex(null);\n    setEditValue(\"\");\n  };\n\n  const handleCancelEdit = () => {\n    setEditingIndex(null);\n    setEditValue(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent, action: \"add\" | \"edit\") => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      if (action === \"add\") {\n        handleAddItem();\n      } else {\n        handleSaveEdit();\n      }\n    }\n  };\n\n  return (\n    <FormItem>\n      {label && (\n        <FormLabel\n          htmlFor={field.name}\n          className={\n            required\n              ? \"after:content-['*'] after:ml-0.5 after:text-red-500\"\n              : \"\"\n          }\n        >\n          {label}\n        </FormLabel>\n      )}\n      <FormControl>\n        <div ref={ref} className=\"space-y-3\" onBlur={onBlur}>\n          {/* Zone d'ajout */}\n          <div className=\"flex gap-2 justify-between\">\n            {RenderInput ? (\n              <div>\n                <RenderInput\n                  value={inputValue}\n                  onValueChange={setInputValue}\n                  name={name}\n                  disabled={disabled}\n                  placeholder={placeholder}\n                />\n              </div>\n            ) : (\n              <Input\n                value={inputValue}\n                id={field.name}\n                onChange={(e) => setInputValue(e.target.value)}\n                placeholder={placeholder}\n                onKeyPress={(e) => handleKeyPress(e, \"add\")}\n                disabled={\n                  disabled || (maxItems ? value.length >= maxItems : false)\n                }\n                name={name}\n                className=\"flex-1\"\n                type={type}\n              />\n            )}\n            <Button\n              type=\"button\"\n              onClick={handleAddItem}\n              disabled={\n                disabled ||\n                !String(inputValue).trim() ||\n                (maxItems ? value.length >= maxItems : false)\n              }\n              size=\"icon\"\n              variant=\"outline\"\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Liste des éléments */}\n          {value.length > 0 && (\n            <div className=\"px-2\">\n              <div className=\"space-y-2 max-h-64 overflow-y-auto border rounded-md p-2 bg-muted/20\">\n                {value.map((item, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center gap-2 p-1.5 border rounded bg-background\"\n                  >\n                    {editingIndex === index ? (\n                      <>\n                        {RenderInput ? (\n                          <RenderInput\n                            value={editValue}\n                            onValueChange={setEditValue}\n                            name={name}\n                            disabled={disabled}\n                            placeholder={placeholder}\n                          />\n                        ) : (\n                          <Input\n                            value={editValue}\n                            onChange={(e) => setEditValue(e.target.value)}\n                            onKeyPress={(e) => handleKeyPress(e, \"edit\")}\n                            className=\"flex-1 h-7 text-sm\"\n                            autoFocus\n                            disabled={disabled}\n                            type={type}\n                          />\n                        )}\n                        <Button\n                          type=\"button\"\n                          onClick={handleSaveEdit}\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-7 w-7 text-green-600 hover:text-green-700\"\n                          disabled={disabled}\n                        >\n                          <Check className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          onClick={handleCancelEdit}\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-7 w-7 text-gray-600 hover:text-gray-700\"\n                          disabled={disabled}\n                        >\n                          <XIcon className=\"h-3 w-3\" />\n                        </Button>\n                      </>\n                    ) : (\n                      <>\n                        <span className=\"flex-1 text-sm truncate px-1\">\n                          {RenderItem ? (\n                            <RenderItem\n                              field={field}\n                              fieldSchema={fieldSchema}\n                              form={form}\n                            />\n                          ) : (\n                            String(item)\n                          )}\n                        </span>\n                        {errors?.[index] && (\n                          <div>\n                            <span className=\"text-red-500 text-xs\">\n                              {errors?.[index]?.message}\n                            </span>\n                          </div>\n                        )}\n                        <Button\n                          type=\"button\"\n                          onClick={() => handleStartEdit(index)}\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-7 w-7 text-blue-600 hover:text-blue-700\"\n                          disabled={disabled}\n                        >\n                          <Edit2 className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          onClick={() => handleRemoveItem(index)}\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-7 w-7 text-red-600 hover:text-red-700\"\n                          disabled={disabled}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Informations complémentaires */}\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {value.length}\n                {maxItems ? `/${maxItems}` : \"\"}\n              </Badge>\n              {maxItems && value.length >= maxItems && (\n                <span className=\"text-amber-600\">Limite atteinte</span>\n              )}\n              <FormMessage />\n            </div>\n            {!allowDuplicates && <span>Doublons non autorisés</span>}\n          </div>\n        </div>\n      </FormControl>\n      {description && <FormDescription>{description}</FormDescription>}\n    </FormItem>\n  );\n}\n",
      "type": "registry:component",
      "target": "shared/auto-form/field-lists/field-list-root.tsx"
    }
  ]
}