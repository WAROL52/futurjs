{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "field-list-auto",
  "type": "registry:component",
  "title": "FieldListAuto",
  "description": "",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/shared/auto-form/field-lists/field-list-auto.tsx",
      "content": "\"use client\";\n\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  FieldRoot,\n  FieldRootProps,\n  getFieldInfo,\n} from \"../field-scalars/field-root\";\nimport { FieldListRoot } from \"./field-list-root\";\nimport { useId } from \"react\";\nimport { Input } from \"@/components/ui/input\";\n\nexport type FieldListAutoProps = FieldRootProps;\n\nexport function FieldListAuto(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  if (field.props.type == \"String\") return <FieldListString {...props} />;\n  if (field.props.type == \"Boolean\") return <FieldListBoolean {...props} />;\n  if (field.props.type == \"Bytes\") return <FieldListBytes {...props} />;\n  if (field.props.type == \"DateTime\") return <FieldListDateTime {...props} />;\n  if ([\"Int\", \"Float\", \"Decimal\", \"BigInt\"].includes(field.props.type))\n    return <FieldListNumber {...props} />;\n  // if (field.props.kind === \"enum\") return <FieldEnum {...props} />;\n  // if (field.props.kind === \"object\") return <FieldRelationalAuto {...props} />;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        const { fieldSchema, form, field } = props;\n        form.formState.errors[field.name];\n        return <FieldListRoot {...props} />;\n      }}\n    />\n  );\n}\n\nfunction FieldListString(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return <FieldListRoot {...props} type=\"text\" />;\n      }}\n    />\n  );\n}\n\nfunction FieldListNumber(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return <FieldListRoot {...props} type=\"number\" convertValue={Number} />;\n      }}\n    />\n  );\n}\n\nfunction FieldListBoolean(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return (\n          <FieldListRoot\n            {...props}\n            convertValue={Boolean}\n            renderInput={({\n              value,\n              onValueChange,\n              name,\n              disabled,\n              placeholder,\n            }) => {\n              return (\n                <div>\n                  {name}\n                  <Input\n                    className=\"order-1 h-4 w-6 after:absolute after:inset-0 [&_span]:size-3 data-[state=checked]:[&_span]:translate-x-2 data-[state=checked]:[&_span]:rtl:-translate-x-2\"\n                    checked={value}\n                    defaultChecked={false}\n                    onChange={(v) => onValueChange(Boolean(v.target.checked))}\n                    name={name}\n                    id={name}\n                    disabled={disabled}\n                  />\n                </div>\n              );\n            }}\n          />\n        );\n      }}\n    />\n  );\n}\nfunction FieldListDateTime(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return (\n          <FieldListRoot\n            {...props}\n            type=\"datetime-local\"\n            convertValue={(v) => new Date(v)}\n          />\n        );\n      }}\n    />\n  );\n}\nfunction FieldListBytes(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return <FieldListRoot {...props} type=\"file\" />;\n      }}\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "shared/auto-form/field-lists/field-list-auto.tsx"
    }
  ]
}