{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "field-one-to-many",
  "type": "registry:component",
  "title": "FieldOneToMany",
  "description": "",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/shared/auto-form/field-relationals/field-one-to-many.tsx",
      "content": "\"use client\";\n\nimport { useId, useState } from \"react\";\nimport { CheckIcon, ChevronDownIcon, PlusIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { FieldRootProps } from \"../field-scalars/field-root\";\n\nconst organizations = [\n  {\n    value: \"originui\",\n    label: \"Origin UI\",\n  },\n  {\n    value: \"cruip\",\n    label: \"Cruip\",\n  },\n];\nexport type FieldOneToManyProps = FieldRootProps;\n\nexport function FieldOneToMany(props: FieldOneToManyProps) {\n  const { fieldSchema } = props;\n\n  const id = useId();\n  const [open, setOpen] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(\"originui\");\n\n  return (\n    <div className=\"*:not-first:mt-2\">\n      <Label htmlFor={id}>{fieldSchema.props.name}</Label>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            id={id}\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"bg-background hover:bg-background border-input w-full justify-between px-3 font-normal outline-offset-0 outline-none focus-visible:outline-[3px]\"\n          >\n            <span className={cn(\"truncate\", !value && \"text-muted-foreground\")}>\n              {value\n                ? organizations.find(\n                    (organization) => organization.value === value\n                  )?.label\n                : \"Select organization\"}\n            </span>\n            <ChevronDownIcon\n              size={16}\n              className=\"text-muted-foreground/80 shrink-0\"\n              aria-hidden=\"true\"\n            />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          className=\"border-input w-full min-w-[var(--radix-popper-anchor-width)] p-0\"\n          align=\"start\"\n        >\n          <Command>\n            <CommandInput placeholder=\"Find organization\" />\n            <CommandList>\n              <CommandEmpty>No organization found.</CommandEmpty>\n              <CommandGroup>\n                {organizations.map((organization) => (\n                  <CommandItem\n                    key={organization.value}\n                    value={organization.value}\n                    onSelect={(currentValue) => {\n                      setValue(currentValue === value ? \"\" : currentValue);\n                      setOpen(false);\n                    }}\n                  >\n                    <Square className=\"\" text={organization.label[0]} />\n                    {organization.label}\n                    {value === organization.value && (\n                      <CheckIcon size={16} className=\"ml-auto\" />\n                    )}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n              <CommandSeparator />\n              <CommandGroup>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start font-normal\"\n                >\n                  <PlusIcon\n                    size={16}\n                    className=\"-ms-2 opacity-60\"\n                    aria-hidden=\"true\"\n                  />\n                  New organization\n                </Button>\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\nconst alphaClassNames: Record<string, string> = {\n  a: \"bg-indigo-400/20 text-indigo-50\",\n  b: \"bg-indigo-400/20 text-indigo-100\",\n  c: \"bg-indigo-400/20 text-indigo-200\",\n  d: \"bg-indigo-400/20 text-indigo-300\",\n  e: \"bg-indigo-400/20 text-indigo-400\",\n  f: \"bg-indigo-400/20 text-indigo-500\",\n  g: \"bg-indigo-400/20 text-indigo-600\",\n  h: \"bg-indigo-400/20 text-indigo-700\",\n  i: \"bg-indigo-400/20 text-indigo-800\",\n  j: \"bg-indigo-400/20 text-indigo-900\",\n  k: \"bg-purple-400/20 text-purple-50\",\n  l: \"bg-purple-400/20 text-purple-100\",\n  m: \"bg-purple-400/20 text-purple-200\",\n  n: \"bg-purple-400/20 text-purple-300\",\n  o: \"bg-purple-400/20 text-purple-400\",\n  p: \"bg-purple-400/20 text-purple-500\",\n  q: \"bg-purple-400/20 text-purple-600\",\n  r: \"bg-purple-400/20 text-purple-700\",\n  s: \"bg-purple-400/20 text-purple-800\",\n  t: \"bg-purple-400/20 text-purple-900\",\n  u: \"bg-rose-400/20 text-rose-100\",\n  v: \"bg-rose-400/20 text-rose-200\",\n  w: \"bg-rose-400/20 text-rose-300\",\n  x: \"bg-rose-400/20 text-rose-400\",\n  y: \"bg-rose-400/20 text-rose-500\",\n  z: \"bg-rose-400/20 text-rose-600\",\n};\n\nconst Square = ({ className, text }: { className?: string; text: string }) => (\n  <span\n    data-square\n    className={cn(\n      \"bg-muted text-muted-foreground flex size-5 items-center justify-center rounded text-xs font-medium\",\n      className,\n      alphaClassNames[text.toString().toLowerCase()] || \"bg-gray-500\"\n    )}\n    aria-hidden=\"true\"\n  >\n    {text}\n  </span>\n);\n",
      "type": "registry:component",
      "target": "shared/auto-form/field-relationals/field-one-to-many.tsx"
    }
  ]
}