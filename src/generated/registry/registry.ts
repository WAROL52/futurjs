
import { RegistryBuild } from "@/types";

export const REGISTRY_BUILD: RegistryBuild = {
  "prisma": {
    "name": "prisma",
    "description": "",
    "packages": {
      "records-lists": {
        "name": "records-lists",
        "description": "",
        "url": "/prisma/records-lists",
        "codeDocs": [
          {
            "title": "RecordsChart",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-chart",
            "fileName": "records-chart.tsx",
            "filePath": "../shared/prisma/records-lists/records-chart.tsx",
            "name": "records-chart",
            "registryUrl": "https://futurjs.vercel.app/r/records-chart.json",
            "componentName": "RecordsChart",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-chart.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordsChartProps = {};\n\nexport function RecordsChart({}: RecordsChartProps) {\n  return <div>RecordsChart</div>;\n}\n"
          },
          {
            "title": "RecordsAuto",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-auto",
            "fileName": "records-auto.tsx",
            "filePath": "../shared/prisma/records-lists/records-auto.tsx",
            "name": "records-auto",
            "registryUrl": "https://futurjs.vercel.app/r/records-auto.json",
            "componentName": "RecordsAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordsAutoProps = {};\n\nexport function RecordsAuto({}: RecordsAutoProps) {\n  return <div>RecordsAuto</div>;\n}\n"
          },
          {
            "title": "RecordsTable",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-table",
            "fileName": "records-table.tsx",
            "filePath": "../shared/prisma/records-lists/records-table.tsx",
            "name": "records-table",
            "registryUrl": "https://futurjs.vercel.app/r/records-table.json",
            "componentName": "RecordsTable",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-table.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordsTableProps = {};\n\nexport function RecordsTable({}: RecordsTableProps) {\n  return <div>RecordsTable</div>;\n}\n"
          },
          {
            "title": "RecordsListCard",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-list-card",
            "fileName": "records-list-card.tsx",
            "filePath": "../shared/prisma/records-lists/records-list-card.tsx",
            "name": "records-list-card",
            "registryUrl": "https://futurjs.vercel.app/r/records-list-card.json",
            "componentName": "RecordsListCard",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-list-card.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// item1 | item2 | item3\n// item4 | item5 | item6\n\nexport type RecordsListCardProps = {};\n\nexport function RecordsListCard({}: RecordsListCardProps) {\n  return <div>RecordsListCard</div>;\n}\n"
          },
          {
            "title": "RecordsListInline",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-list-inline",
            "fileName": "records-list-inline.tsx",
            "filePath": "../shared/prisma/records-lists/records-list-inline.tsx",
            "name": "records-list-inline",
            "registryUrl": "https://futurjs.vercel.app/r/records-list-inline.json",
            "componentName": "RecordsListInline",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-list-inline.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// item1 | item2 | item3 | item4 | item5 | item6\nexport type RecordsListInlineProps = {};\n\nexport function RecordsListInline({}: RecordsListInlineProps) {\n  return <div>RecordsListInline</div>;\n}\n"
          },
          {
            "title": "RecordsListRow",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-list-row",
            "fileName": "records-list-row.tsx",
            "filePath": "../shared/prisma/records-lists/records-list-row.tsx",
            "name": "records-list-row",
            "registryUrl": "https://futurjs.vercel.app/r/records-list-row.json",
            "componentName": "RecordsListRow",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-list-row.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// item1\n// item2\n// item3\n// item4\n// item5\n// item6\nexport type RecordsListRowProps = {};\n\nexport function RecordsListRow({}: RecordsListRowProps) {\n  return <div>RecordsListRow</div>;\n}\n"
          }
        ]
      },
      "record-field-scalars": {
        "name": "record-field-scalars",
        "description": "",
        "url": "/prisma/record-field-scalars",
        "codeDocs": [
          {
            "title": "RecordFieldString",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-string",
            "fileName": "record-field-string.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-string.tsx",
            "name": "record-field-string",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-string.json",
            "componentName": "RecordFieldString",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-string.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldStringProps = {};\n\nexport function RecordFieldString({}: RecordFieldStringProps) {\n  return <div>RecordFieldString</div>;\n}\n"
          },
          {
            "title": "RecordFieldNumber",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-number",
            "fileName": "record-field-number.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-number.tsx",
            "name": "record-field-number",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-number.json",
            "componentName": "RecordFieldNumber",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-number.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldNumberProps = {};\n\nexport function RecordFieldNumber({}: RecordFieldNumberProps) {\n  return <div>RecordFieldNumber</div>;\n}\n"
          },
          {
            "title": "RecordFieldBoolean",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-boolean",
            "fileName": "record-field-boolean.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-boolean.tsx",
            "name": "record-field-boolean",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-boolean.json",
            "componentName": "RecordFieldBoolean",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-boolean.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldBooleanProps = {};\n\nexport function RecordFieldBoolean({}: RecordFieldBooleanProps) {\n  return <div>RecordFieldBoolean</div>;\n}\n"
          },
          {
            "title": "RecordFieldRange",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-range",
            "fileName": "record-field-range.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-range.tsx",
            "name": "record-field-range",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-range.json",
            "componentName": "RecordFieldRange",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-range.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldRangeProps = {};\n\nexport function RecordFieldRange({}: RecordFieldRangeProps) {\n  return <div>RecordFieldRange</div>;\n}\n"
          },
          {
            "title": "RecordFieldRoot",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-root",
            "fileName": "record-field-root.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-root.tsx",
            "name": "record-field-root",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-root.json",
            "componentName": "RecordFieldRoot",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-root.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldRootProps = {};\n\nexport function RecordFieldRoot({}: RecordFieldRootProps) {\n  return <div>RecordFieldRoot</div>;\n}\n"
          },
          {
            "title": "RecordFieldAuto",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-auto",
            "fileName": "record-field-auto.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-auto.tsx",
            "name": "record-field-auto",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-auto.json",
            "componentName": "RecordFieldAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldAutoProps = {};\n\nexport function RecordFieldAuto({}: RecordFieldAutoProps) {\n  return <div>RecordFieldAuto</div>;\n}\n"
          },
          {
            "title": "RecordFieldDateTime",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-date-time",
            "fileName": "record-field-date-time.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-date-time.tsx",
            "name": "record-field-date-time",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-date-time.json",
            "componentName": "RecordFieldDateTime",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-date-time.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldDateTimeProps = {};\n\nexport function RecordFieldDateTime({}: RecordFieldDateTimeProps) {\n  return <div>RecordFieldDateTime</div>;\n}\n"
          },
          {
            "title": "RecordFieldEnum",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-enum",
            "fileName": "record-field-enum.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-enum.tsx",
            "name": "record-field-enum",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-enum.json",
            "componentName": "RecordFieldEnum",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-enum.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldEnumProps = {};\n\nexport function RecordFieldEnum({}: RecordFieldEnumProps) {\n  return <div>RecordFieldEnum</div>;\n}\n"
          },
          {
            "title": "RecordFieldBytes",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-bytes",
            "fileName": "record-field-bytes.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-bytes.tsx",
            "name": "record-field-bytes",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-bytes.json",
            "componentName": "RecordFieldBytes",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-bytes.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldBytesProps = {};\n\nexport function RecordFieldBytes({}: RecordFieldBytesProps) {\n  return <div>RecordFieldBytes</div>;\n}\n"
          }
        ]
      },
      "records": {
        "name": "records",
        "description": "",
        "url": "/prisma/records",
        "codeDocs": [
          {
            "title": "RecordAuto",
            "description": "",
            "props": {},
            "url": "/prisma/records/record-auto",
            "fileName": "record-auto.tsx",
            "filePath": "../shared/prisma/records/record-auto.tsx",
            "name": "record-auto",
            "registryUrl": "https://futurjs.vercel.app/r/record-auto.json",
            "componentName": "RecordAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records/record-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordAutoProps = {};\n\nexport function RecordAuto({}: RecordAutoProps) {\n  return <div>RecordAuto</div>;\n}\n"
          },
          {
            "title": "RecordRow",
            "description": "",
            "props": {},
            "url": "/prisma/records/record-row",
            "fileName": "record-row.tsx",
            "filePath": "../shared/prisma/records/record-row.tsx",
            "name": "record-row",
            "registryUrl": "https://futurjs.vercel.app/r/record-row.json",
            "componentName": "RecordRow",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records/record-row.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordRowProps = {};\n\nexport function RecordRow({}: RecordRowProps) {\n  return <div>RecordRow</div>;\n}\n"
          },
          {
            "title": "RecordInline",
            "description": "",
            "props": {},
            "url": "/prisma/records/record-inline",
            "fileName": "record-inline.tsx",
            "filePath": "../shared/prisma/records/record-inline.tsx",
            "name": "record-inline",
            "registryUrl": "https://futurjs.vercel.app/r/record-inline.json",
            "componentName": "RecordInline",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records/record-inline.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordInlineProps = {};\n\nexport function RecordInline({}: RecordInlineProps) {\n  return <div>RecordInline</div>;\n}\n"
          },
          {
            "title": "RecordCard",
            "description": "",
            "props": {},
            "url": "/prisma/records/record-card",
            "fileName": "record-card.tsx",
            "filePath": "../shared/prisma/records/record-card.tsx",
            "name": "record-card",
            "registryUrl": "https://futurjs.vercel.app/r/record-card.json",
            "componentName": "RecordCard",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records/record-card.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordCardProps = {};\n\nexport function RecordCard({}: RecordCardProps) {\n  return <div>RecordCard</div>;\n}\n"
          }
        ]
      },
      "views": {
        "name": "views",
        "description": "",
        "url": "/prisma/views",
        "codeDocs": [
          {
            "title": "ViewHoverCard",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-hover-card",
            "fileName": "view-hover-card.tsx",
            "filePath": "../shared/prisma/views/view-hover-card.tsx",
            "name": "view-hover-card",
            "registryUrl": "https://futurjs.vercel.app/r/view-hover-card.json",
            "componentName": "ViewHoverCard",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-hover-card.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewHoverCardProps = {};\n\nexport function ViewHoverCard({}: ViewHoverCardProps) {\n  return <div>ViewHoverCard</div>;\n}\n"
          },
          {
            "title": "ViewAvatar",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-avatar",
            "fileName": "view-avatar.tsx",
            "filePath": "../shared/prisma/views/view-avatar.tsx",
            "name": "view-avatar",
            "registryUrl": "https://futurjs.vercel.app/r/view-avatar.json",
            "componentName": "ViewAvatar",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-avatar.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewAvatarProps = {};\n\nexport function ViewAvatar({}: ViewAvatarProps) {\n  return <div>ViewAvatar</div>;\n}\n"
          },
          {
            "title": "ViewDateTime",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-date-time",
            "fileName": "view-date-time.tsx",
            "filePath": "../shared/prisma/views/view-date-time.tsx",
            "name": "view-date-time",
            "registryUrl": "https://futurjs.vercel.app/r/view-date-time.json",
            "componentName": "ViewDateTime",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-date-time.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewDateTimeProps = {};\n\nexport function ViewDateTime({}: ViewDateTimeProps) {\n  return <div>ViewDateTime</div>;\n}\n"
          },
          {
            "title": "ViewSheet",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-sheet",
            "fileName": "view-sheet.tsx",
            "filePath": "../shared/prisma/views/view-sheet.tsx",
            "name": "view-sheet",
            "registryUrl": "https://futurjs.vercel.app/r/view-sheet.json",
            "componentName": "ViewSheet",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-sheet.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewSheetProps = {};\n\nexport function ViewSheet({}: ViewSheetProps) {\n  return <div>ViewSheet</div>;\n}\n"
          },
          {
            "title": "ViewTag",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-tag",
            "fileName": "view-tag.tsx",
            "filePath": "../shared/prisma/views/view-tag.tsx",
            "name": "view-tag",
            "registryUrl": "https://futurjs.vercel.app/r/view-tag.json",
            "componentName": "ViewTag",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-tag.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewTagProps = {};\n\nexport function ViewTag({}: ViewTagProps) {\n  return <div>ViewTag</div>;\n}\n"
          },
          {
            "title": "ViewCard",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-card",
            "fileName": "view-card.tsx",
            "filePath": "../shared/prisma/views/view-card.tsx",
            "name": "view-card",
            "registryUrl": "https://futurjs.vercel.app/r/view-card.json",
            "componentName": "ViewCard",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-card.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewCardProps = {};\n\nexport function ViewCard({}: ViewCardProps) {\n  return <div>ViewCard</div>;\n}\n"
          },
          {
            "title": "ViewPopover",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-popover",
            "fileName": "view-popover.tsx",
            "filePath": "../shared/prisma/views/view-popover.tsx",
            "name": "view-popover",
            "registryUrl": "https://futurjs.vercel.app/r/view-popover.json",
            "componentName": "ViewPopover",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-popover.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewPopoverProps = {};\n\nexport function ViewPopover({}: ViewPopoverProps) {\n  return <div>ViewPopover</div>;\n}\n"
          },
          {
            "title": "ViewDialog",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-dialog",
            "fileName": "view-dialog.tsx",
            "filePath": "../shared/prisma/views/view-dialog.tsx",
            "name": "view-dialog",
            "registryUrl": "https://futurjs.vercel.app/r/view-dialog.json",
            "componentName": "ViewDialog",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-dialog.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewDialogProps = {};\n\nexport function ViewDialog({}: ViewDialogProps) {\n  return <div>ViewDialog</div>;\n}\n"
          },
          {
            "title": "ViewBlock",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-block",
            "fileName": "view-block.tsx",
            "filePath": "../shared/prisma/views/view-block.tsx",
            "name": "view-block",
            "registryUrl": "https://futurjs.vercel.app/r/view-block.json",
            "componentName": "ViewBlock",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-block.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewBlockProps = {};\n\nexport function ViewBlock({}: ViewBlockProps) {\n  return <div>ViewBlock</div>;\n}\n"
          }
        ]
      },
      "record-field-relationals": {
        "name": "record-field-relationals",
        "description": "",
        "url": "/prisma/record-field-relationals",
        "codeDocs": [
          {
            "title": "RecordFieldManyToOne",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-many-to-one",
            "fileName": "record-field-many-to-one.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-many-to-one.tsx",
            "name": "record-field-many-to-one",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-many-to-one.json",
            "componentName": "RecordFieldManyToOne",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-many-to-one.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldManyToOneProps = {};\n\nexport function RecordFieldManyToOne({}: RecordFieldManyToOneProps) {\n  return <div>RecordFieldManyToOne</div>;\n}\n"
          },
          {
            "title": "RecordFieldRelationalAuto",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-relational-auto",
            "fileName": "record-field-relational-auto.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-relational-auto.tsx",
            "name": "record-field-relational-auto",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-relational-auto.json",
            "componentName": "RecordFieldRelationalAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-relational-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldRelationalAutoProps = {};\n\nexport function RecordFieldRelationalAuto({}: RecordFieldRelationalAutoProps) {\n  return <div>RecordFieldRelationalAuto</div>;\n}\n"
          },
          {
            "title": "RecordFieldOneToMany",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-one-to-many",
            "fileName": "record-field-one-to-many.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-one-to-many.tsx",
            "name": "record-field-one-to-many",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-one-to-many.json",
            "componentName": "RecordFieldOneToMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-one-to-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldOneToManyProps = {};\n\nexport function RecordFieldOneToMany({}: RecordFieldOneToManyProps) {\n  return <div>RecordFieldOneToMany</div>;\n}\n"
          },
          {
            "title": "RecordFieldManyToMany",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-many-to-many",
            "fileName": "record-field-many-to-many.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-many-to-many.tsx",
            "name": "record-field-many-to-many",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-many-to-many.json",
            "componentName": "RecordFieldManyToMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-many-to-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldManyToManyProps = {};\n\nexport function RecordFieldManyToMany({}: RecordFieldManyToManyProps) {\n  return <div>RecordFieldManyToMany</div>;\n}\n"
          },
          {
            "title": "RecordFieldOneToOne",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-one-to-one",
            "fileName": "record-field-one-to-one.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-one-to-one.tsx",
            "name": "record-field-one-to-one",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-one-to-one.json",
            "componentName": "RecordFieldOneToOne",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-one-to-one.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldOneToOneProps = {};\n\nexport function RecordFieldOneToOne({}: RecordFieldOneToOneProps) {\n  return <div>RecordFieldOneToOne</div>;\n}\n"
          }
        ]
      },
      "forms": {
        "name": "forms",
        "description": "",
        "url": "/prisma/forms",
        "codeDocs": [
          {
            "title": "FormAuto",
            "description": "",
            "props": {},
            "url": "/prisma/forms/form-auto",
            "fileName": "form-auto.tsx",
            "filePath": "../shared/prisma/forms/form-auto.tsx",
            "name": "form-auto",
            "registryUrl": "https://futurjs.vercel.app/r/form-auto.json",
            "componentName": "FormAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/forms/form-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormAutoProps = {};\n\nexport function FormAuto({}: FormAutoProps) {\n  return <div>FormAuto</div>;\n}\n"
          },
          {
            "title": "FormUpdateMany",
            "description": "",
            "props": {},
            "url": "/prisma/forms/form-update-many",
            "fileName": "form-update-many.tsx",
            "filePath": "../shared/prisma/forms/form-update-many.tsx",
            "name": "form-update-many",
            "registryUrl": "https://futurjs.vercel.app/r/form-update-many.json",
            "componentName": "FormUpdateMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/forms/form-update-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormUpdateManyProps = {};\n\nexport function FormUpdateMany({}: FormUpdateManyProps) {\n  return <div>FormUpdateMany</div>;\n}\n"
          },
          {
            "title": "FormCreateMany",
            "description": "",
            "props": {},
            "url": "/prisma/forms/form-create-many",
            "fileName": "form-create-many.tsx",
            "filePath": "../shared/prisma/forms/form-create-many.tsx",
            "name": "form-create-many",
            "registryUrl": "https://futurjs.vercel.app/r/form-create-many.json",
            "componentName": "FormCreateMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/forms/form-create-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormCreateManyProps = {};\n\nexport function FormCreateMany({}: FormCreateManyProps) {\n  return <div>FormCreateMany</div>;\n}\n"
          },
          {
            "title": "FormDelete",
            "description": "",
            "props": {},
            "url": "/prisma/forms/form-delete",
            "fileName": "form-delete.tsx",
            "filePath": "../shared/prisma/forms/form-delete.tsx",
            "name": "form-delete",
            "registryUrl": "https://futurjs.vercel.app/r/form-delete.json",
            "componentName": "FormDelete",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/forms/form-delete.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormDeleteProps = {};\n\nexport function FormDelete({}: FormDeleteProps) {\n  return <div>FormDelete</div>;\n}\n"
          },
          {
            "title": "FormCreate",
            "description": "",
            "props": {},
            "url": "/prisma/forms/form-create",
            "fileName": "form-create.tsx",
            "filePath": "../shared/prisma/forms/form-create.tsx",
            "name": "form-create",
            "registryUrl": "https://futurjs.vercel.app/r/form-create.json",
            "componentName": "FormCreate",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/forms/form-create.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormCreateProps = {};\n\nexport function FormCreate({}: FormCreateProps) {\n  return <div>FormCreate</div>;\n}\n"
          },
          {
            "title": "FormRoot",
            "description": "",
            "props": {},
            "url": "/prisma/forms/form-root",
            "fileName": "form-root.tsx",
            "filePath": "../shared/prisma/forms/form-root.tsx",
            "name": "form-root",
            "registryUrl": "https://futurjs.vercel.app/r/form-root.json",
            "componentName": "FormRoot",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/forms/form-root.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormRootProps = {};\n\nexport function FormRoot({}: FormRootProps) {\n  return <div>FormRoot</div>;\n}\n"
          },
          {
            "title": "FormUpdate",
            "description": "",
            "props": {},
            "url": "/prisma/forms/form-update",
            "fileName": "form-update.tsx",
            "filePath": "../shared/prisma/forms/form-update.tsx",
            "name": "form-update",
            "registryUrl": "https://futurjs.vercel.app/r/form-update.json",
            "componentName": "FormUpdate",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/forms/form-update.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormUpdateProps = {};\n\nexport function FormUpdate({}: FormUpdateProps) {\n  return <div>FormUpdate</div>;\n}\n"
          }
        ]
      },
      "lib": {
        "name": "lib",
        "description": "",
        "url": "/prisma/lib",
        "codeDocs": [
          {
            "title": "CreateQueryHook",
            "description": "",
            "props": {},
            "url": "/prisma/lib/create-query-hook",
            "fileName": "create-query-hook.ts",
            "filePath": "../shared/prisma/lib/create-query-hook.ts",
            "name": "create-query-hook",
            "registryUrl": "https://futurjs.vercel.app/r/create-query-hook.json",
            "componentName": "CreateQueryHook",
            "demo": [
              {
                "title": "Main",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use client\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  useActionMutation,\n  useActionQuery,\n  useCreateUser,\n  useDeleteUser,\n  useGetUsers,\n  useResetUsers,\n} from \"./client\";\nimport { Button } from \"@/components/ui/button\";\nimport { FakeUser } from \"./action\";\n\nexport type MainProps = {};\n\nexport default function Main({}: MainProps) {\n  const { users, isGetting } = useGetUsers();\n  const { deleteUser, userIdDeleting, isDeleting } = useDeleteUser();\n  const { resetUsers, isResetting } = useResetUsers();\n  const { createUser, isCreating } = useCreateUser();\n  if (isGetting) {\n    return <div>Loading...</div>;\n  }\n  if (isResetting) {\n    return <div>Resetting...</div>;\n  }\n  return (\n    <div>\n      <h1>\n        Users List <Button onClick={() => resetUsers(0)}>reset</Button>{\" \"}\n      </h1>\n      <Card className=\"h-[200px] overflow-auto\">\n        <CardContent>\n          <ul>\n            {users.map((user) => (\n              <li key={user.id} className=\"mb-2\">\n                <strong>{user.name}</strong>- {user.age} - {user.email}{\" \"}\n                <Button\n                  variant=\"destructive\"\n                  size={\"sm\"}\n                  onClick={() => deleteUser(user.id)}\n                  disabled={isDeleting}\n                >\n                  {isDeleting && userIdDeleting === user.id\n                    ? \"Deleting...\"\n                    : \"Delete\"}\n                </Button>\n              </li>\n            ))}\n            {users.length === 0 && <li>No users found.</li>}\n          </ul>\n        </CardContent>\n      </Card>\n      <form\n        action={(data) => {\n          createUser({\n            name: data.get(\"name\") as string,\n            email: data.get(\"email\") as string,\n            age: Number(data.get(\"age\")) || (0 as number),\n            isActive: true,\n          });\n        }}\n        className=\"flex flex-col gap-2 my-4 border p-4 rounded-lg bg-muted/50\"\n      >\n        <input name=\"name\" type=\"text\" placeholder=\"Name\" />\n        <input name=\"email\" type=\"email\" placeholder=\"Email\" />\n        <input name=\"age\" type=\"number\" placeholder=\"Age\" />\n        <Button type=\"submit\">Create User</Button>\n      </form>\n    </div>\n  );\n}\n",
                "filename": "main.tsx",
                "path": "../_exemples/create-query-hook/demo/main.tsx"
              },
              {
                "title": "client.tsx",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use client\";\nimport * as user from \"./action\";\nimport { createQueryHook } from \"@/shared/prisma/lib/create-query-hook\";\n\nexport const { useActionMutation, useActionQuery } = createQueryHook({\n  user,\n});\n\nexport function useGetUsers() {\n  const { data: users = [], isLoading: isGetting } = useActionQuery({\n    queryKey: [\"users\"],\n    queryFn: (db) => db.user.getUsers(),\n  });\n  return { users, isGetting };\n}\n\nexport function useDeleteUser() {\n  const {\n    mutate: deleteUser,\n    variables: userIdDeleting,\n    isPending: isDeleting,\n  } = useActionMutation({\n    invalidateOnSuccess: [[\"users\"]],\n    mutationFn: (id: string, db) => db.user.deleteUser(id),\n  });\n  return { deleteUser, userIdDeleting, isDeleting };\n}\n\nexport function useCreateUser() {\n  const { mutate: createUser, isPending: isCreating } = useActionMutation({\n    invalidateOnSuccess: [[\"users\"]],\n    mutationFn: (user: Omit<user.FakeUser, \"id\">, db) =>\n      db.user.createUser(user),\n  });\n  return { createUser, isCreating };\n}\n\nexport function useUpdateUser() {\n  const { mutate: updateUser, isPending: isUpdating } = useActionMutation({\n    invalidateOnSuccess: [[\"users\"]],\n    mutationFn: (args: { id: string; user: Partial<user.FakeUser> }, db) =>\n      db.user.updateUser(args),\n  });\n  return { updateUser, isUpdating };\n}\n\nexport function useResetUsers() {\n  const { mutate: resetUsers, isPending: isResetting } = useActionMutation({\n    mutationFn: (_, db) => db.user.resetUsers(),\n    invalidateOnSuccess: [[\"users\"]],\n  });\n  return { resetUsers, isResetting };\n}\n",
                "filename": "client.tsx",
                "path": "../_exemples/create-query-hook/demo/client.tsx"
              },
              {
                "title": "action.tsx",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use server\";\n\nexport type FakeUser = {\n  id: string;\n  name: string;\n  email: string;\n  age: number;\n  isActive: boolean;\n};\n\nexport async function getUsers() {\n  return data;\n}\n\nexport async function getUserById(id: string) {\n  return data.find((user) => user.id === id) || null;\n}\n\nexport async function createUser(user: Omit<FakeUser, \"id\">) {\n  const newUser: FakeUser = {\n    id: (data.length + 1).toString(),\n    ...user,\n  };\n  data.push(newUser);\n  return newUser;\n}\n\nexport async function updateUser({\n  id,\n  user,\n}: {\n  id: string;\n  user: Partial<FakeUser>;\n}) {\n  const index = data.findIndex((u) => u.id === id);\n  if (index === -1) {\n    return null;\n  }\n  const updatedUser = { ...data[index], ...user };\n  data[index] = updatedUser;\n  return updatedUser;\n}\n\nexport async function deleteUser(id: string) {\n  const index = data.findIndex((u) => u.id === id);\n  if (index === -1) {\n    return null;\n  }\n  const deletedUser = data[index];\n  data.splice(index, 1);\n  return deletedUser;\n}\nexport async function resetUsers() {\n  data.splice(0, data.length, ...dataDefault);\n\n  return data;\n}\n\nconst dataDefault: FakeUser[] = [\n  {\n    id: \"1\",\n    name: \"John Doe\",\n    email: \"john.doe@example.com\",\n    age: 30,\n    isActive: true,\n  },\n  {\n    id: \"2\",\n    name: \"Jane Smith\",\n    email: \"jane.smith@example.com\",\n    age: 25,\n    isActive: false,\n  },\n  {\n    id: \"3\",\n    name: \"Alice Johnson\",\n    email: \"alice.johnson@example.com\",\n    age: 28,\n    isActive: true,\n  },\n];\n\nconst data = [...dataDefault];\n",
                "filename": "action.tsx",
                "path": "../_exemples/create-query-hook/demo/action.tsx"
              }
            ],
            "exemples": {},
            "target": "@/shared/prisma/lib/create-query-hook.ts",
            "dependencies": [
              "@tanstack/react-query"
            ],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  UseQueryOptions,\n  QueryKey,\n  QueryFunctionContext,\n  DefaultError,\n  UseMutationOptions,\n} from \"@tanstack/react-query\";\n\nexport type FnHookQuery<\n  T,\n  R,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = never\n> = (\n  dbClient: T,\n  context: QueryFunctionContext<TQueryKey, TPageParam>\n) => R | Promise<R>;\n\nexport type UseHookQueryOptions<T, R, TQueryKey extends QueryKey = QueryKey> = {\n  queryFn: FnHookQuery<T, R, TQueryKey>;\n} & Omit<UseQueryOptions<R, DefaultError, R, TQueryKey>, \"queryFn\">;\n\nexport type FnHookMutation<T, TData = unknown, TVariables = unknown> = (\n  variables: TVariables,\n  dbClient: T\n) => Promise<TData>;\n\nexport type UseHookMutationOptions<\n  T,\n  R,\n  TVariables = unknown,\n  TContext = unknown\n> = {\n  mutationFn: FnHookMutation<T, R, TVariables>;\n  invalidateOnSuccess?: QueryKey[];\n} & Omit<\n  UseMutationOptions<R, DefaultError, TVariables, TContext>,\n  \"mutationFn\"\n>;\nexport type FnActionHandler = ((args: any) => any) | ((args?: any) => any);\nexport type ActionHandler = {\n  [modelName: string]: {\n    [methodName: string]: FnActionHandler;\n  };\n};\n\nexport function createQueryHook<T extends ActionHandler>(handler: T) {\n  return {\n    useActionQuery: createUseActionQuery<T>(handler),\n    useActionMutation: createUseActionMutation<T>(handler),\n  };\n}\ncreateQueryHook.dependencies = [\"@tanstack/react-query\"];\n\nfunction createUseActionQuery<T extends object>(handler: T) {\n  return function useDbQuery<R, TQueryKey extends QueryKey = QueryKey>(\n    options: UseHookQueryOptions<T, R, TQueryKey>\n  ) {\n    return useQuery({\n      ...options,\n      queryFn: (context) => options.queryFn(handler, context),\n    });\n  };\n}\n\nfunction createUseActionMutation<T extends object>(handler: T) {\n  return function useDbMutation<R, TVariables = unknown, TContext = unknown>(\n    options: UseHookMutationOptions<T, R, TVariables, TContext>\n  ) {\n    const queryClient = useQueryClient();\n    return useMutation({\n      ...options,\n      mutationFn: (variables) => options.mutationFn(variables, handler),\n      onSuccess(data, variables, context) {\n        if (options.invalidateOnSuccess) {\n          options.invalidateOnSuccess.forEach((key) => {\n            const queryKey = Array.isArray(key) ? key : [key];\n            queryClient.invalidateQueries({ queryKey });\n          });\n        }\n        if (options.onSuccess) {\n          options.onSuccess(data, variables, context);\n        }\n      },\n    });\n  };\n}\n"
          },
          {
            "title": "CreateDbApiServer",
            "description": "",
            "props": {},
            "url": "/prisma/lib/create-db-api-server",
            "fileName": "create-db-api-server.ts",
            "filePath": "../shared/prisma/lib/create-db-api-server.ts",
            "name": "create-db-api-server",
            "registryUrl": "https://futurjs.vercel.app/r/create-db-api-server.json",
            "componentName": "CreateDbApiServer",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/lib/create-db-api-server.ts",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "export type DbApiServerProps = {\n  modelName: string;\n  methodName: string;\n  args: Record<string, any>;\n};\nexport type DbServer = {\n  [modelName: string]: {\n    [methodName: string]: ((args: any) => any) | ((args?: any) => any);\n  };\n};\n\nexport function createDbApiServer<T extends DbServer>(dbServer: T) {\n  return {\n    handleRequest: async (props: DbApiServerProps) => {\n      const { modelName, methodName, args } = props;\n\n      if (!modelName || !methodName) {\n        throw new Error(\"Model name and method name must be provided.\");\n      }\n      if (typeof modelName !== \"string\" || typeof methodName !== \"string\") {\n        throw new Error(\"Model name and method name must be strings.\");\n      }\n      if (args && (typeof args !== \"object\" || Array.isArray(args))) {\n        throw new Error(\"Args must be an object.\");\n      }\n      if (/^[a-zA-Z0-9_]+$/.test(modelName) === false) {\n        throw new Error(\"Model name contains invalid characters.\");\n      }\n      if (/^[a-zA-Z0-9_]+$/.test(methodName) === false) {\n        throw new Error(\"Method name contains invalid characters.\");\n      }\n      if (!(modelName in dbServer)) {\n        throw new Error(`Model ${modelName} does not exist on the server.`);\n      }\n\n      const model = dbServer[modelName];\n\n      if (!(methodName in model)) {\n        throw new Error(\n          `Method ${methodName} does not exist on model ${modelName}.`\n        );\n      }\n\n      const method = model[methodName];\n\n      if (typeof method !== \"function\") {\n        throw new Error(\n          `${methodName} is not a function on model ${modelName}.`\n        );\n      }\n      try {\n        return {\n          data: await method(args),\n        };\n      } catch (error) {\n        return {\n          error: String(error),\n        };\n      }\n    },\n  };\n}\n"
          },
          {
            "title": "CreateDbApiClient",
            "description": "",
            "props": {},
            "url": "/prisma/lib/create-db-api-client",
            "fileName": "create-db-api-client.ts",
            "filePath": "../shared/prisma/lib/create-db-api-client.ts",
            "name": "create-db-api-client",
            "registryUrl": "https://futurjs.vercel.app/r/create-db-api-client.json",
            "componentName": "CreateDbApiClient",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/lib/create-db-api-client.ts",
            "dependencies": [
              "axios"
            ],
            "registryDependencies": [
              "create-query-hook"
            ],
            "registryType": "registry:component",
            "content": "\"use client\";\nimport axios, { AxiosError } from \"axios\";\nimport { ActionHandler, createQueryHook } from \"./create-query-hook\";\n\nexport type DbHookPrisma<T = any> = {\n  [K in keyof T as K extends `$${infer R}` ? never : K]: Omit<T[K], \"fields\">;\n};\n\nexport type DbConfig = {\n  baseUrl: string;\n};\n\nexport function createDbApiClient<T extends ActionHandler>(config: DbConfig) {\n  const dbClient = createProxy<T>(config);\n  const queryHook = createQueryHook(dbClient);\n  return {\n    useDbQuery: queryHook.useActionQuery,\n    useDbMutation: queryHook.useActionMutation,\n  };\n}\ncreateDbApiClient.registryDependencies = [\"create-query-hook\"];\ncreateDbApiClient.dependencies = [\"axios\"];\n\nfunction createProxy<T extends object>(config: DbConfig) {\n  return new Proxy(\n    {},\n    {\n      get: (_, modelName) => {\n        return new Proxy(\n          {},\n          {\n            get: (_, methodName) => {\n              return (args: Record<string, any>) => {\n                return fetchDbData(\n                  modelName as string,\n                  methodName as string,\n                  args,\n                  config\n                );\n              };\n            },\n          }\n        );\n      },\n    }\n  ) as T;\n}\n\nasync function fetchDbData<T>(\n  modelName: string,\n  methodName: string,\n  args: Record<string, any>,\n  config: DbConfig\n) {\n  if (!modelName || !methodName) {\n    throw new Error(\"Model name and method name must be provided.\");\n  }\n  try {\n    const res = await axios.post(\n      `${config.baseUrl}/${modelName}/${methodName}`,\n      {\n        args,\n      }\n    );\n    return res.data || null;\n  } catch (error) {\n    const axiosError = error as AxiosError;\n    throw new Error(\n      String(axiosError.response?.data || axiosError.message || String(error))\n    );\n  }\n}\n"
          }
        ]
      },
      "block": {
        "name": "block",
        "description": "",
        "url": "/prisma/block",
        "codeDocs": [
          {
            "title": "SchemaVisualizer",
            "description": "",
            "props": {},
            "url": "/prisma/block/schema-visualizer",
            "fileName": "schema-visualizer.tsx",
            "filePath": "../shared/prisma/block/schema-visualizer.tsx",
            "name": "schema-visualizer",
            "registryUrl": "https://futurjs.vercel.app/r/schema-visualizer.json",
            "componentName": "SchemaVisualizer",
            "demo": [
              {
                "title": "schema-data.ts",
                "description": "",
                "props": {},
                "language": "ts",
                "content": "import type { Node, Edge } from \"@xyflow/react\";\n\n// Define the initial nodes (tables)\nexport const initialNodes: Node[] = [\n  {\n    id: \"users\",\n    type: \"tableNode\",\n    position: { x: 800, y: 150 },\n    data: {\n      label: \"users\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"full_name\", type: \"varchar\" },\n        { name: \"email\", type: \"varchar\" },\n        { name: \"gender\", type: \"varchar\" },\n        { name: \"date_of_birth\", type: \"date\" },\n        { name: \"country_code\", type: \"varchar\", isForeign: true },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"orders\",\n    type: \"tableNode\",\n    position: { x: 450, y: 183 },\n    data: {\n      label: \"orders\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"user_id\", type: \"int\", isForeign: true },\n        { name: \"status\", type: \"varchar\" },\n        { name: \"total_amount\", type: \"decimal\" },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"order_items\",\n    type: \"tableNode\",\n    position: { x: 100, y: 150 },\n    data: {\n      label: \"order_items\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"order_id\", type: \"int\", isForeign: true },\n        { name: \"product_id\", type: \"int\", isForeign: true },\n        { name: \"quantity\", type: \"int\" },\n        { name: \"unit_price\", type: \"decimal\" },\n      ],\n    },\n  },\n  {\n    id: \"products\",\n    type: \"tableNode\",\n    position: { x: 100, y: 460 },\n    data: {\n      label: \"products\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"merchant_id\", type: \"int\", isForeign: true },\n        { name: \"name\", type: \"varchar\" },\n        { name: \"description\", type: \"text\" },\n        { name: \"price\", type: \"decimal\" },\n        { name: \"status\", type: \"varchar\" },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"merchants\",\n    type: \"tableNode\",\n    position: { x: 450, y: 493 },\n    data: {\n      label: \"merchants\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"name\", type: \"varchar\" },\n        { name: \"email\", type: \"varchar\" },\n        { name: \"country_code\", type: \"varchar\", isForeign: true },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"countries\",\n    type: \"tableNode\",\n    position: { x: 800, y: 570 },\n    data: {\n      label: \"countries\",\n      fields: [\n        { name: \"code\", type: \"varchar\", isPrimary: true },\n        { name: \"name\", type: \"varchar\" },\n        { name: \"continent_name\", type: \"varchar\" },\n        { name: \"currency\", type: \"varchar\" },\n        {\n          name: \"nomfdjdgnkdngkdjngkdjngkdngkdngkdngkdngkdngkndkgndk\",\n          type: \"warol\",\n        },\n      ],\n    },\n  },\n];\n\n// Define the edges (relationships) between tables with specific column connections\nexport const initialEdges: Edge[] = [\n  // User to Orders (one-to-many): users.id -> orders.user_id\n  {\n    id: \"users-orders\",\n    source: \"users\",\n    target: \"orders\",\n    sourceHandle: \"id\",\n    targetHandle: \"user_id\",\n  },\n  // Orders to Order Items (one-to-many): orders.id -> order_items.order_id\n  {\n    id: \"orders-order_items\",\n    source: \"orders\",\n    target: \"order_items\",\n    sourceHandle: \"id\",\n    targetHandle: \"order_id\",\n  },\n  // Products to Order Items (one-to-many): products.id -> order_items.product_id\n  {\n    id: \"products-order_items\",\n    source: \"products\",\n    target: \"order_items\",\n    sourceHandle: \"id\",\n    targetHandle: \"product_id\",\n  },\n  // Merchants to Products (one-to-many): merchants.id -> products.merchant_id\n  {\n    id: \"merchants-products\",\n    source: \"merchants\",\n    target: \"products\",\n    sourceHandle: \"id\",\n    targetHandle: \"merchant_id\",\n  },\n  // Countries to Users (one-to-many): countries.code -> users.country_code\n  {\n    id: \"countries-users\",\n    source: \"countries\",\n    target: \"users\",\n    sourceHandle: \"code\",\n    targetHandle: \"country_code\",\n  },\n  // Countries to Merchants (one-to-many): countries.code -> merchants.country_code\n  {\n    id: \"countries-merchants\",\n    source: \"countries\",\n    target: \"merchants\",\n    sourceHandle: \"code\",\n    targetHandle: \"country_code\",\n  },\n];\n",
                "filename": "schema-data.ts",
                "path": "../_exemples/schema-visualizer/demo/schema-data.ts"
              },
              {
                "title": "Main",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use client\";\n\nimport { initialEdges, initialNodes } from \"./schema-data\";\nimport { SchemaVisualizer } from \"@/shared/prisma/block/schema-visualizer\";\n\nexport type MainProps = {};\n\nexport default function Main({}: MainProps) {\n  return (\n    <div className=\"min-h-[50svh] flex flex-col\">\n      <SchemaVisualizer\n        initialEdges={initialEdges}\n        initialNodes={initialNodes}\n      />\n    </div>\n  );\n}\n",
                "filename": "main.tsx",
                "path": "../_exemples/schema-visualizer/demo/main.tsx"
              }
            ],
            "exemples": {
              "With custom node and edge": [
                {
                  "title": "schema-data.ts",
                  "description": "",
                  "props": {},
                  "language": "ts",
                  "content": "import type { Node, Edge } from \"@xyflow/react\";\n\n// Define the initial nodes (tables)\nexport const initialNodes: Node[] = [\n  {\n    id: \"users\",\n    type: \"tableNode\",\n    position: { x: 800, y: 150 },\n    data: {\n      label: \"users\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"full_name\", type: \"varchar\" },\n        { name: \"email\", type: \"varchar\" },\n        { name: \"gender\", type: \"varchar\" },\n        { name: \"date_of_birth\", type: \"date\" },\n        { name: \"country_code\", type: \"varchar\", isForeign: true },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"orders\",\n    type: \"tableNode\",\n    position: { x: 450, y: 183 },\n    data: {\n      label: \"orders\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"user_id\", type: \"int\", isForeign: true },\n        { name: \"status\", type: \"varchar\" },\n        { name: \"total_amount\", type: \"decimal\" },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"order_items\",\n    type: \"tableNode\",\n    position: { x: 100, y: 150 },\n    data: {\n      label: \"order_items\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"order_id\", type: \"int\", isForeign: true },\n        { name: \"product_id\", type: \"int\", isForeign: true },\n        { name: \"quantity\", type: \"int\" },\n        { name: \"unit_price\", type: \"decimal\" },\n      ],\n    },\n  },\n  {\n    id: \"products\",\n    type: \"tableNode\",\n    position: { x: 100, y: 460 },\n    data: {\n      label: \"products\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"merchant_id\", type: \"int\", isForeign: true },\n        { name: \"name\", type: \"varchar\" },\n        { name: \"description\", type: \"text\" },\n        { name: \"price\", type: \"decimal\" },\n        { name: \"status\", type: \"varchar\" },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"merchants\",\n    type: \"tableNode\",\n    position: { x: 450, y: 493 },\n    data: {\n      label: \"merchants\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"name\", type: \"varchar\" },\n        { name: \"email\", type: \"varchar\" },\n        { name: \"country_code\", type: \"varchar\", isForeign: true },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"countries\",\n    type: \"tableNode\",\n    position: { x: 800, y: 570 },\n    data: {\n      label: \"countries\",\n      fields: [\n        { name: \"code\", type: \"varchar\", isPrimary: true },\n        { name: \"name\", type: \"varchar\" },\n        { name: \"continent_name\", type: \"varchar\" },\n        { name: \"currency\", type: \"varchar\" },\n        {\n          name: \"nomfdjdgnkdngkdjngkdjngkdngkdngkdngkdngkdngkndkgndk\",\n          type: \"warol\",\n        },\n      ],\n    },\n  },\n];\n\n// Define the edges (relationships) between tables with specific column connections\nexport const initialEdges: Edge[] = [\n  // User to Orders (one-to-many): users.id -> orders.user_id\n  {\n    id: \"users-orders\",\n    source: \"users\",\n    target: \"orders\",\n    sourceHandle: \"id\",\n    targetHandle: \"user_id\",\n  },\n  // Orders to Order Items (one-to-many): orders.id -> order_items.order_id\n  {\n    id: \"orders-order_items\",\n    source: \"orders\",\n    target: \"order_items\",\n    sourceHandle: \"id\",\n    targetHandle: \"order_id\",\n  },\n  // Products to Order Items (one-to-many): products.id -> order_items.product_id\n  {\n    id: \"products-order_items\",\n    source: \"products\",\n    target: \"order_items\",\n    sourceHandle: \"id\",\n    targetHandle: \"product_id\",\n  },\n  // Merchants to Products (one-to-many): merchants.id -> products.merchant_id\n  {\n    id: \"merchants-products\",\n    source: \"merchants\",\n    target: \"products\",\n    sourceHandle: \"id\",\n    targetHandle: \"merchant_id\",\n  },\n  // Countries to Users (one-to-many): countries.code -> users.country_code\n  {\n    id: \"countries-users\",\n    source: \"countries\",\n    target: \"users\",\n    sourceHandle: \"code\",\n    targetHandle: \"country_code\",\n  },\n  // Countries to Merchants (one-to-many): countries.code -> merchants.country_code\n  {\n    id: \"countries-merchants\",\n    source: \"countries\",\n    target: \"merchants\",\n    sourceHandle: \"code\",\n    targetHandle: \"country_code\",\n  },\n];\n",
                  "filename": "schema-data.ts",
                  "path": "../_exemples/schema-visualizer/With custom node and edge/schema-data.ts"
                },
                {
                  "title": "Main",
                  "description": "",
                  "props": {},
                  "language": "tsx",
                  "content": "\"use client\";\n\nimport { initialEdges, initialNodes } from \"./schema-data\";\nimport { SchemaVisualizer } from \"@/shared/prisma/block/schema-visualizer\";\n\nexport type MainProps = {};\n\nexport default function Main({}: MainProps) {\n  return (\n    <div className=\"min-h-[50svh] flex flex-col\">\n      <SchemaVisualizer\n        initialEdges={initialEdges}\n        initialNodes={initialNodes}\n      />\n    </div>\n  );\n}\n",
                  "filename": "main.tsx",
                  "path": "../_exemples/schema-visualizer/With custom node and edge/main.tsx"
                }
              ]
            },
            "target": "@/shared/prisma/block/schema-visualizer.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { useCallback, useMemo, useRef } from \"react\";\nimport {\n  ReactFlow,\n  ReactFlowProvider,\n  Background,\n  useNodesState,\n  useEdgesState,\n  Panel,\n  useReactFlow,\n  BackgroundVariant,\n  Edge,\n  Node,\n  Handle,\n  Position,\n  NodeProps,\n  BaseEdge,\n  EdgeProps,\n  getSmoothStepPath,\n} from \"@xyflow/react\";\nimport \"@xyflow/react/dist/base.css\";\nimport { RiAddLine, RiSubtractLine, RiFullscreenLine } from \"@remixicon/react\";\nimport { Button } from \"@/components/ui/button\";\nimport { RiMore2Fill } from \"@remixicon/react\";\nimport { cn } from \"@/lib/utils\";\n\n// Register custom node types and edge types\n\nconst edgeTypes = {\n  custom: SchemaEdge,\n};\n\nexport type SchemaVisualizerProps = {\n  initialNodes: Node[];\n  initialEdges: Edge[];\n};\n\nexport function SchemaVisualizerInner({\n  initialNodes,\n  initialEdges,\n}: SchemaVisualizerProps) {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const reactFlowWrapper = useRef<HTMLDivElement>(null);\n  const { fitView, zoomIn, zoomOut } = useReactFlow();\n\n  const onFitView = useCallback(() => {\n    fitView({ padding: 0.2 });\n  }, [fitView]);\n  const TableNode = useCallback(\n    function TableNode({ data, id }: NodeProps<TableNodeType>) {\n      // Find all source connections for this node\n      const sourceConnections = initialEdges\n        .filter((edge) => edge.source === id)\n        .map((edge) => edge.sourceHandle);\n\n      // Find all target connections for this node\n      const targetConnections = initialEdges\n        .filter((edge) => edge.target === id)\n        .map((edge) => edge.targetHandle);\n\n      return (\n        <div\n          className={cn(\n            \"rounded-xl bg-card shadow-[0_1px_1px_rgba(0,0,0,0.02),_0_2px_2px_rgba(0,0,0,0.02),_0_4px_4px_rgba(0,0,0,0.02),_0_8px_8px_rgba(0,0,0,0.02),_0_16px_16px_rgba(0,0,0,0.02),_0_32px_32px_rgba(0,0,0,0.02)] w-66 font-mono\",\n            data.selected ? \"ring-2 ring-primary ring-offset-2\" : \"\"\n          )}\n        >\n          <div className=\"flex items-center justify-between px-4 py-3 border-b border-border/80 bg-gradient-to-t from-background/70 dark:from-background/30\">\n            <div className=\"text-[13px]\">\n              <span className=\"text-muted-foreground/80\">/</span>{\" \"}\n              <span className=\"font-medium\">{data.label}</span>\n            </div>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"shadow-none hover:bg-transparent -my-2 -me-2 text-muted-foreground/60 hover:text-muted-foreground\"\n              aria-label=\"Open edit menu\"\n            >\n              <RiMore2Fill className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n          </div>\n          <div className=\"text-xs py-2\">\n            {data.fields.map((field: TableField) => (\n              <div key={field.name} className=\"px-4 relative group\">\n                <div className=\"flex items-center justify-between gap-2 py-2 border-dashed group-not-last:border-b\">\n                  <span className=\"truncate font-medium\">{field.name}</span>\n                  <span className=\"text-muted-foreground/60\">{field.type}</span>\n\n                  {/* Field handles */}\n                  {((field.isPrimary &&\n                    sourceConnections.includes(field.name)) ||\n                    (field.isForeign &&\n                      targetConnections.includes(field.name))) && (\n                    <Handle\n                      type={field.isPrimary ? \"source\" : \"target\"}\n                      position={\n                        field.isPrimary ? Position.Left : Position.Right\n                      }\n                      id={field.name}\n                      className=\"size-2.5 rounded-full bg-foreground! border-2 border-background\"\n                      isConnectable={false}\n                    />\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    },\n    [initialEdges]\n  );\n  const { nodeTypes } = useMemo(() => {\n    return {\n      nodeTypes: {\n        tableNode: TableNode,\n      },\n    };\n  }, [TableNode]);\n  return (\n    <main className=\"flex-1 flex items-stretch\">\n      <div className=\"w-full\" ref={reactFlowWrapper}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          nodeTypes={nodeTypes}\n          edgeTypes={edgeTypes}\n          fitView\n          minZoom={0.5}\n          maxZoom={1}\n          defaultEdgeOptions={{\n            type: \"custom\",\n            className: \"opacity-25\",\n          }}\n          style={\n            {\n              \"--xy-background-pattern-dots-color-default\":\n                \"var(--color-border)\",\n              \"--xy-edge-stroke-width-default\": 1.5,\n              \"--xy-edge-stroke-default\": \"var(--color-foreground)\",\n              \"--xy-edge-stroke-selected-default\": \"var(--color-foreground)\",\n              \"--xy-attribution-background-color-default\": \"transparent\",\n            } as React.CSSProperties\n          }\n          attributionPosition=\"bottom-left\"\n        >\n          <Background variant={BackgroundVariant.Dots} gap={20} size={2} />\n\n          <Panel\n            position=\"bottom-right\"\n            className=\"inline-flex -space-x-px rounded-md shadow-xs rtl:space-x-reverse\"\n          >\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"text-muted-foreground/80 hover:text-muted-foreground rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg size-10 focus-visible:z-10 bg-card\"\n              onClick={() => zoomIn()}\n              aria-label=\"Zoom in\"\n            >\n              <RiAddLine className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"text-muted-foreground/80 hover:text-muted-foreground rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg size-10 focus-visible:z-10 bg-card\"\n              onClick={() => zoomOut()}\n              aria-label=\"Zoom out\"\n            >\n              <RiSubtractLine className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"text-muted-foreground/80 hover:text-muted-foreground rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg size-10 focus-visible:z-10 bg-card\"\n              onClick={onFitView}\n              aria-label=\"Fit view\"\n            >\n              <RiFullscreenLine className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n          </Panel>\n        </ReactFlow>\n      </div>\n    </main>\n  );\n}\n\nexport function SchemaVisualizer(props: SchemaVisualizerProps) {\n  return (\n    <ReactFlowProvider>\n      <SchemaVisualizerInner {...props} />\n    </ReactFlowProvider>\n  );\n}\n\nfunction SchemaEdge({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  markerEnd,\n}: EdgeProps) {\n  const [edgePath] = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    sourcePosition: sourcePosition || Position.Bottom,\n    targetX,\n    targetY,\n    targetPosition: targetPosition || Position.Top,\n    borderRadius: 8, // Increased border radius for smoother corners\n  });\n\n  return <BaseEdge path={edgePath} style={style} markerEnd={markerEnd} />;\n}\n\nexport interface TableField {\n  name: string;\n  type: string;\n  isPrimary?: boolean;\n  isForeign?: boolean;\n}\n\ninterface TableNodeData extends Record<string, unknown> {\n  label: string;\n  fields: TableField[];\n  selected?: boolean;\n}\n\ntype TableNodeType = Node<TableNodeData, \"tableNode\">;\n"
          }
        ]
      },
      "field-scalars": {
        "name": "field-scalars",
        "description": "",
        "url": "/prisma/field-scalars",
        "codeDocs": [
          {
            "title": "FieldRoot",
            "description": "",
            "props": {},
            "url": "/prisma/field-scalars/field-root",
            "fileName": "field-root.tsx",
            "filePath": "../shared/prisma/field-scalars/field-root.tsx",
            "name": "field-root",
            "registryUrl": "https://futurjs.vercel.app/r/field-root.json",
            "componentName": "FieldRoot",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-scalars/field-root.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldRootProps = {};\n\nexport function FieldRoot({}: FieldRootProps) {\n  return <div>FieldRoot</div>;\n}\n"
          },
          {
            "title": "FieldEnum",
            "description": "",
            "props": {},
            "url": "/prisma/field-scalars/field-enum",
            "fileName": "field-enum.tsx",
            "filePath": "../shared/prisma/field-scalars/field-enum.tsx",
            "name": "field-enum",
            "registryUrl": "https://futurjs.vercel.app/r/field-enum.json",
            "componentName": "FieldEnum",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-scalars/field-enum.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldEnumProps = {};\n\nexport function FieldEnum({}: FieldEnumProps) {\n  return <div>FieldEnum</div>;\n}\n"
          },
          {
            "title": "FieldString",
            "description": "",
            "props": {},
            "url": "/prisma/field-scalars/field-string",
            "fileName": "field-string.tsx",
            "filePath": "../shared/prisma/field-scalars/field-string.tsx",
            "name": "field-string",
            "registryUrl": "https://futurjs.vercel.app/r/field-string.json",
            "componentName": "FieldString",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-scalars/field-string.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// string\n// text\n// password\n// password-create\n// email\n// url\n// json\n// otp\n// description\nexport type FieldStringProps = {};\n\nexport function FieldString({}: FieldStringProps) {\n  return <div>FieldString</div>;\n}\n"
          },
          {
            "title": "FieldDateTime",
            "description": "",
            "props": {},
            "url": "/prisma/field-scalars/field-date-time",
            "fileName": "field-date-time.tsx",
            "filePath": "../shared/prisma/field-scalars/field-date-time.tsx",
            "name": "field-date-time",
            "registryUrl": "https://futurjs.vercel.app/r/field-date-time.json",
            "componentName": "FieldDateTime",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-scalars/field-date-time.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// date time\n// date\n// time\n// timestamp\nexport type FieldDateTimeProps = {};\n\nexport function FieldDateTime({}: FieldDateTimeProps) {\n  return <div>FieldDateTime</div>;\n}\n"
          },
          {
            "title": "FieldNumber",
            "description": "",
            "props": {},
            "url": "/prisma/field-scalars/field-number",
            "fileName": "field-number.tsx",
            "filePath": "../shared/prisma/field-scalars/field-number.tsx",
            "name": "field-number",
            "registryUrl": "https://futurjs.vercel.app/r/field-number.json",
            "componentName": "FieldNumber",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-scalars/field-number.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// big int\n// int\n// float\n// decimal\nexport type FieldNumberProps = {};\n\nexport function FieldNumber({}: FieldNumberProps) {\n  return <div>FieldNumber</div>;\n}\n"
          },
          {
            "title": "FieldRange",
            "description": "",
            "props": {},
            "url": "/prisma/field-scalars/field-range",
            "fileName": "field-range.tsx",
            "filePath": "../shared/prisma/field-scalars/field-range.tsx",
            "name": "field-range",
            "registryUrl": "https://futurjs.vercel.app/r/field-range.json",
            "componentName": "FieldRange",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-scalars/field-range.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// range date time\n// range date\n// range time\n// range timestamp\n// range int\n// range float\n// range decimal\n// range big int\nexport type FieldRangeProps = {};\n\nexport function FieldRange({}: FieldRangeProps) {\n  return <div>FieldRange</div>;\n}\n"
          },
          {
            "title": "FieldAuto",
            "description": "",
            "props": {},
            "url": "/prisma/field-scalars/field-auto",
            "fileName": "field-auto.tsx",
            "filePath": "../shared/prisma/field-scalars/field-auto.tsx",
            "name": "field-auto",
            "registryUrl": "https://futurjs.vercel.app/r/field-auto.json",
            "componentName": "FieldAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-scalars/field-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldAutoProps = {};\n\nexport function FieldAuto({}: FieldAutoProps) {\n  return <div>FieldAuto</div>;\n}\n"
          },
          {
            "title": "FieldBoolean",
            "description": "",
            "props": {},
            "url": "/prisma/field-scalars/field-boolean",
            "fileName": "field-boolean.tsx",
            "filePath": "../shared/prisma/field-scalars/field-boolean.tsx",
            "name": "field-boolean",
            "registryUrl": "https://futurjs.vercel.app/r/field-boolean.json",
            "componentName": "FieldBoolean",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-scalars/field-boolean.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldBooleanProps = {};\n\nexport function FieldBoolean({}: FieldBooleanProps) {\n  return <div>FieldBoolean</div>;\n}\n"
          },
          {
            "title": "FieldBytes",
            "description": "",
            "props": {},
            "url": "/prisma/field-scalars/field-bytes",
            "fileName": "field-bytes.tsx",
            "filePath": "../shared/prisma/field-scalars/field-bytes.tsx",
            "name": "field-bytes",
            "registryUrl": "https://futurjs.vercel.app/r/field-bytes.json",
            "componentName": "FieldBytes",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-scalars/field-bytes.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldBytesProps = {};\n\nexport function FieldBytes({}: FieldBytesProps) {\n  return <div>FieldBytes</div>;\n}\n"
          }
        ]
      },
      "record-field-lists": {
        "name": "record-field-lists",
        "description": "",
        "url": "/prisma/record-field-lists",
        "codeDocs": [
          {
            "title": "RecordFieldScalar",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-lists/record-field-scalar",
            "fileName": "record-field-scalar.tsx",
            "filePath": "../shared/prisma/record-field-lists/record-field-scalar.tsx",
            "name": "record-field-scalar",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-scalar.json",
            "componentName": "RecordFieldScalar",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-lists/record-field-scalar.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldScalarProps = {};\n\nexport function RecordFieldScalar({}: RecordFieldScalarProps) {\n  return <div>RecordFieldScalar</div>;\n}\n"
          },
          {
            "title": "RecordFieldListAuto",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-lists/record-field-list-auto",
            "fileName": "record-field-list-auto.tsx",
            "filePath": "../shared/prisma/record-field-lists/record-field-list-auto.tsx",
            "name": "record-field-list-auto",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-list-auto.json",
            "componentName": "RecordFieldListAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-lists/record-field-list-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldListAutoProps = {};\n\nexport function RecordFieldListAuto({}: RecordFieldListAutoProps) {\n  return <div>RecordFieldListAuto</div>;\n}\n"
          },
          {
            "title": "RecordFieldListRelational",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-lists/record-field-list-relational",
            "fileName": "record-field-list-relational.tsx",
            "filePath": "../shared/prisma/record-field-lists/record-field-list-relational.tsx",
            "name": "record-field-list-relational",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-list-relational.json",
            "componentName": "RecordFieldListRelational",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-lists/record-field-list-relational.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldListRelationalProps = {};\n\nexport function RecordFieldListRelational({}: RecordFieldListRelationalProps) {\n  return <div>RecordFieldListRelational</div>;\n}\n"
          }
        ]
      },
      "field-relationals": {
        "name": "field-relationals",
        "description": "",
        "url": "/prisma/field-relationals",
        "codeDocs": [
          {
            "title": "FieldRelationalAuto",
            "description": "",
            "props": {},
            "url": "/prisma/field-relationals/field-relational-auto",
            "fileName": "field-relational-auto.tsx",
            "filePath": "../shared/prisma/field-relationals/field-relational-auto.tsx",
            "name": "field-relational-auto",
            "registryUrl": "https://futurjs.vercel.app/r/field-relational-auto.json",
            "componentName": "FieldRelationalAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-relationals/field-relational-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldRelationalAutoProps = {};\n\nexport function FieldRelationalAuto({}: FieldRelationalAutoProps) {\n  return <div>FieldRelationalAuto</div>;\n}\n"
          },
          {
            "title": "FieldOneToMany",
            "description": "",
            "props": {},
            "url": "/prisma/field-relationals/field-one-to-many",
            "fileName": "field-one-to-many.tsx",
            "filePath": "../shared/prisma/field-relationals/field-one-to-many.tsx",
            "name": "field-one-to-many",
            "registryUrl": "https://futurjs.vercel.app/r/field-one-to-many.json",
            "componentName": "FieldOneToMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-relationals/field-one-to-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldOneToManyProps = {};\n\nexport function FieldOneToMany({}: FieldOneToManyProps) {\n  return <div>FieldOneToMany</div>;\n}\n"
          },
          {
            "title": "FieldManyToMany",
            "description": "",
            "props": {},
            "url": "/prisma/field-relationals/field-many-to-many",
            "fileName": "field-many-to-many.tsx",
            "filePath": "../shared/prisma/field-relationals/field-many-to-many.tsx",
            "name": "field-many-to-many",
            "registryUrl": "https://futurjs.vercel.app/r/field-many-to-many.json",
            "componentName": "FieldManyToMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-relationals/field-many-to-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldManyToManyProps = {};\n\nexport function FieldManyToMany({}: FieldManyToManyProps) {\n  return <div>FieldManyToMany</div>;\n}\n"
          },
          {
            "title": "FieldOneToOne",
            "description": "",
            "props": {},
            "url": "/prisma/field-relationals/field-one-to-one",
            "fileName": "field-one-to-one.tsx",
            "filePath": "../shared/prisma/field-relationals/field-one-to-one.tsx",
            "name": "field-one-to-one",
            "registryUrl": "https://futurjs.vercel.app/r/field-one-to-one.json",
            "componentName": "FieldOneToOne",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-relationals/field-one-to-one.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldOneToOneProps = {};\n\nexport function FieldOneToOne({}: FieldOneToOneProps) {\n  return <div>FieldOneToOne</div>;\n}\n"
          },
          {
            "title": "FieldManyToOne",
            "description": "",
            "props": {},
            "url": "/prisma/field-relationals/field-many-to-one",
            "fileName": "field-many-to-one.tsx",
            "filePath": "../shared/prisma/field-relationals/field-many-to-one.tsx",
            "name": "field-many-to-one",
            "registryUrl": "https://futurjs.vercel.app/r/field-many-to-one.json",
            "componentName": "FieldManyToOne",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-relationals/field-many-to-one.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldManyToOneProps = {};\n\nexport function FieldManyToOne({}: FieldManyToOneProps) {\n  return <div>FieldManyToOne</div>;\n}\n"
          }
        ]
      },
      "pages": {
        "name": "pages",
        "description": "",
        "url": "/prisma/pages",
        "codeDocs": [
          {
            "title": "PageRecordList",
            "description": "",
            "props": {},
            "url": "/prisma/pages/page-record-list",
            "fileName": "page-record-list.tsx",
            "filePath": "../shared/prisma/pages/page-record-list.tsx",
            "name": "page-record-list",
            "registryUrl": "https://futurjs.vercel.app/r/page-record-list.json",
            "componentName": "PageRecordList",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/pages/page-record-list.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type PageRecordListProps = {};\n\nexport function PageRecordList({}: PageRecordListProps) {\n  return <div>PageRecordList</div>;\n}\n"
          },
          {
            "title": "PageRecord",
            "description": "",
            "props": {},
            "url": "/prisma/pages/page-record",
            "fileName": "page-record.tsx",
            "filePath": "../shared/prisma/pages/page-record.tsx",
            "name": "page-record",
            "registryUrl": "https://futurjs.vercel.app/r/page-record.json",
            "componentName": "PageRecord",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/pages/page-record.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type PageRecordProps = {};\n\nexport function PageRecord({}: PageRecordProps) {\n  return <div>PageRecord</div>;\n}\n"
          },
          {
            "title": "PageDatabase",
            "description": "",
            "props": {},
            "url": "/prisma/pages/page-database",
            "fileName": "page-database.tsx",
            "filePath": "../shared/prisma/pages/page-database.tsx",
            "name": "page-database",
            "registryUrl": "https://futurjs.vercel.app/r/page-database.json",
            "componentName": "PageDatabase",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/pages/page-database.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type PageDatabaseProps = {};\n\nexport function PageDatabase({}: PageDatabaseProps) {\n  return <div>PageDatabase</div>;\n}\n"
          }
        ]
      },
      "field-lists": {
        "name": "field-lists",
        "description": "",
        "url": "/prisma/field-lists",
        "codeDocs": [
          {
            "title": "FieldListRelational",
            "description": "",
            "props": {},
            "url": "/prisma/field-lists/field-list-relational",
            "fileName": "field-list-relational.tsx",
            "filePath": "../shared/prisma/field-lists/field-list-relational.tsx",
            "name": "field-list-relational",
            "registryUrl": "https://futurjs.vercel.app/r/field-list-relational.json",
            "componentName": "FieldListRelational",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-lists/field-list-relational.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldListRelationalProps = {};\n\nexport function FieldListRelational({}: FieldListRelationalProps) {\n  return <div>FieldListRelational</div>;\n}\n"
          },
          {
            "title": "FieldListScalar",
            "description": "",
            "props": {},
            "url": "/prisma/field-lists/field-list-scalar",
            "fileName": "field-list-scalar.tsx",
            "filePath": "../shared/prisma/field-lists/field-list-scalar.tsx",
            "name": "field-list-scalar",
            "registryUrl": "https://futurjs.vercel.app/r/field-list-scalar.json",
            "componentName": "FieldListScalar",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-lists/field-list-scalar.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldListScalarProps = {};\n\nexport function FieldListScalar({}: FieldListScalarProps) {\n  return <div>FieldListScalar</div>;\n}\n"
          },
          {
            "title": "FieldListAuto",
            "description": "",
            "props": {},
            "url": "/prisma/field-lists/field-list-auto",
            "fileName": "field-list-auto.tsx",
            "filePath": "../shared/prisma/field-lists/field-list-auto.tsx",
            "name": "field-list-auto",
            "registryUrl": "https://futurjs.vercel.app/r/field-list-auto.json",
            "componentName": "FieldListAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/field-lists/field-list-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldListAutoProps = {};\n\nexport function FieldListAuto({}: FieldListAutoProps) {\n  return <div>FieldListAuto</div>;\n}\n"
          }
        ]
      }
    },
    "url": "/prisma"
  }
}

	