
import { RegistryBuild } from "@/types";

export const REGISTRY_BUILD: RegistryBuild = {
  "db-tools": {
    "name": "db-tools",
    "description": "",
    "packages": {
      "db-schema": {
        "name": "db-schema",
        "description": "",
        "url": "/db-tools/db-schema",
        "codeDocs": []
      },
      "db-type": {
        "name": "db-type",
        "description": "",
        "url": "/db-tools/db-type",
        "codeDocs": []
      }
    },
    "url": "/db-tools"
  },
  "prisma": {
    "name": "prisma",
    "description": "",
    "packages": {
      "records-lists": {
        "name": "records-lists",
        "description": "",
        "url": "/prisma/records-lists",
        "codeDocs": [
          {
            "title": "RecordsChart",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-chart",
            "fileName": "records-chart.tsx",
            "filePath": "../shared/prisma/records-lists/records-chart.tsx",
            "name": "records-chart",
            "registryUrl": "https://futurjs.vercel.app/r/records-chart.json",
            "componentName": "RecordsChart",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-chart.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordsChartProps = {};\n\nexport function RecordsChart({}: RecordsChartProps) {\n  return <div>RecordsChart</div>;\n}\n"
          },
          {
            "title": "RecordsAuto",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-auto",
            "fileName": "records-auto.tsx",
            "filePath": "../shared/prisma/records-lists/records-auto.tsx",
            "name": "records-auto",
            "registryUrl": "https://futurjs.vercel.app/r/records-auto.json",
            "componentName": "RecordsAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordsAutoProps = {};\n\nexport function RecordsAuto({}: RecordsAutoProps) {\n  return <div>RecordsAuto</div>;\n}\n"
          },
          {
            "title": "RecordsTable",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-table",
            "fileName": "records-table.tsx",
            "filePath": "../shared/prisma/records-lists/records-table.tsx",
            "name": "records-table",
            "registryUrl": "https://futurjs.vercel.app/r/records-table.json",
            "componentName": "RecordsTable",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-table.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordsTableProps = {};\n\nexport function RecordsTable({}: RecordsTableProps) {\n  return <div>RecordsTable</div>;\n}\n"
          },
          {
            "title": "RecordsListCard",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-list-card",
            "fileName": "records-list-card.tsx",
            "filePath": "../shared/prisma/records-lists/records-list-card.tsx",
            "name": "records-list-card",
            "registryUrl": "https://futurjs.vercel.app/r/records-list-card.json",
            "componentName": "RecordsListCard",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-list-card.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// item1 | item2 | item3\n// item4 | item5 | item6\n\nexport type RecordsListCardProps = {};\n\nexport function RecordsListCard({}: RecordsListCardProps) {\n  return <div>RecordsListCard</div>;\n}\n"
          },
          {
            "title": "RecordsListInline",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-list-inline",
            "fileName": "records-list-inline.tsx",
            "filePath": "../shared/prisma/records-lists/records-list-inline.tsx",
            "name": "records-list-inline",
            "registryUrl": "https://futurjs.vercel.app/r/records-list-inline.json",
            "componentName": "RecordsListInline",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-list-inline.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// item1 | item2 | item3 | item4 | item5 | item6\nexport type RecordsListInlineProps = {};\n\nexport function RecordsListInline({}: RecordsListInlineProps) {\n  return <div>RecordsListInline</div>;\n}\n"
          },
          {
            "title": "RecordsListRow",
            "description": "",
            "props": {},
            "url": "/prisma/records-lists/records-list-row",
            "fileName": "records-list-row.tsx",
            "filePath": "../shared/prisma/records-lists/records-list-row.tsx",
            "name": "records-list-row",
            "registryUrl": "https://futurjs.vercel.app/r/records-list-row.json",
            "componentName": "RecordsListRow",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records-lists/records-list-row.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\n// item1\n// item2\n// item3\n// item4\n// item5\n// item6\nexport type RecordsListRowProps = {};\n\nexport function RecordsListRow({}: RecordsListRowProps) {\n  return <div>RecordsListRow</div>;\n}\n"
          }
        ]
      },
      "actions": {
        "name": "actions",
        "description": "",
        "url": "/prisma/actions",
        "codeDocs": [
          {
            "title": "prismaActions",
            "description": "",
            "props": {},
            "url": "/prisma/actions/prisma-actions",
            "fileName": "prisma-actions.ts",
            "filePath": "../shared/prisma/actions/prisma-actions.ts",
            "name": "prisma-actions",
            "registryUrl": "https://futurjs.vercel.app/r/prisma-actions.json",
            "componentName": "PrismaActions",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/actions/prisma-actions.ts",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:lib",
            "content": "\"use server\";\nimport { Prisma, PrismaClient } from \"@/generated/prisma\";\n\nexport async function getPrismaSchema() {\n  return Prisma.dmmf.datamodel as Prisma.DMMF.Datamodel;\n}\n\nexport async function prismaActions() {\n  return null;\n}\n"
          }
        ]
      },
      "record-field-scalars": {
        "name": "record-field-scalars",
        "description": "",
        "url": "/prisma/record-field-scalars",
        "codeDocs": [
          {
            "title": "RecordFieldString",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-string",
            "fileName": "record-field-string.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-string.tsx",
            "name": "record-field-string",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-string.json",
            "componentName": "RecordFieldString",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-string.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldStringProps = {};\n\nexport function RecordFieldString({}: RecordFieldStringProps) {\n  return <div>RecordFieldString</div>;\n}\n"
          },
          {
            "title": "RecordFieldNumber",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-number",
            "fileName": "record-field-number.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-number.tsx",
            "name": "record-field-number",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-number.json",
            "componentName": "RecordFieldNumber",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-number.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldNumberProps = {};\n\nexport function RecordFieldNumber({}: RecordFieldNumberProps) {\n  return <div>RecordFieldNumber</div>;\n}\n"
          },
          {
            "title": "RecordFieldBoolean",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-boolean",
            "fileName": "record-field-boolean.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-boolean.tsx",
            "name": "record-field-boolean",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-boolean.json",
            "componentName": "RecordFieldBoolean",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-boolean.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldBooleanProps = {};\n\nexport function RecordFieldBoolean({}: RecordFieldBooleanProps) {\n  return <div>RecordFieldBoolean</div>;\n}\n"
          },
          {
            "title": "RecordFieldRange",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-range",
            "fileName": "record-field-range.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-range.tsx",
            "name": "record-field-range",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-range.json",
            "componentName": "RecordFieldRange",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-range.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldRangeProps = {};\n\nexport function RecordFieldRange({}: RecordFieldRangeProps) {\n  return <div>RecordFieldRange</div>;\n}\n"
          },
          {
            "title": "RecordFieldRoot",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-root",
            "fileName": "record-field-root.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-root.tsx",
            "name": "record-field-root",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-root.json",
            "componentName": "RecordFieldRoot",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-root.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldRootProps = {};\n\nexport function RecordFieldRoot({}: RecordFieldRootProps) {\n  return <div>RecordFieldRoot</div>;\n}\n"
          },
          {
            "title": "RecordFieldAuto",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-auto",
            "fileName": "record-field-auto.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-auto.tsx",
            "name": "record-field-auto",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-auto.json",
            "componentName": "RecordFieldAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldAutoProps = {};\n\nexport function RecordFieldAuto({}: RecordFieldAutoProps) {\n  return <div>RecordFieldAuto</div>;\n}\n"
          },
          {
            "title": "RecordFieldDateTime",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-date-time",
            "fileName": "record-field-date-time.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-date-time.tsx",
            "name": "record-field-date-time",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-date-time.json",
            "componentName": "RecordFieldDateTime",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-date-time.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldDateTimeProps = {};\n\nexport function RecordFieldDateTime({}: RecordFieldDateTimeProps) {\n  return <div>RecordFieldDateTime</div>;\n}\n"
          },
          {
            "title": "RecordFieldEnum",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-enum",
            "fileName": "record-field-enum.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-enum.tsx",
            "name": "record-field-enum",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-enum.json",
            "componentName": "RecordFieldEnum",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-enum.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldEnumProps = {};\n\nexport function RecordFieldEnum({}: RecordFieldEnumProps) {\n  return <div>RecordFieldEnum</div>;\n}\n"
          },
          {
            "title": "RecordFieldBytes",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-scalars/record-field-bytes",
            "fileName": "record-field-bytes.tsx",
            "filePath": "../shared/prisma/record-field-scalars/record-field-bytes.tsx",
            "name": "record-field-bytes",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-bytes.json",
            "componentName": "RecordFieldBytes",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-scalars/record-field-bytes.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldBytesProps = {};\n\nexport function RecordFieldBytes({}: RecordFieldBytesProps) {\n  return <div>RecordFieldBytes</div>;\n}\n"
          }
        ]
      },
      "records": {
        "name": "records",
        "description": "",
        "url": "/prisma/records",
        "codeDocs": [
          {
            "title": "RecordAuto",
            "description": "",
            "props": {},
            "url": "/prisma/records/record-auto",
            "fileName": "record-auto.tsx",
            "filePath": "../shared/prisma/records/record-auto.tsx",
            "name": "record-auto",
            "registryUrl": "https://futurjs.vercel.app/r/record-auto.json",
            "componentName": "RecordAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records/record-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordAutoProps = {};\n\nexport function RecordAuto({}: RecordAutoProps) {\n  return <div>RecordAuto</div>;\n}\n"
          },
          {
            "title": "RecordRow",
            "description": "",
            "props": {},
            "url": "/prisma/records/record-row",
            "fileName": "record-row.tsx",
            "filePath": "../shared/prisma/records/record-row.tsx",
            "name": "record-row",
            "registryUrl": "https://futurjs.vercel.app/r/record-row.json",
            "componentName": "RecordRow",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records/record-row.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordRowProps = {};\n\nexport function RecordRow({}: RecordRowProps) {\n  return <div>RecordRow</div>;\n}\n"
          },
          {
            "title": "RecordInline",
            "description": "",
            "props": {},
            "url": "/prisma/records/record-inline",
            "fileName": "record-inline.tsx",
            "filePath": "../shared/prisma/records/record-inline.tsx",
            "name": "record-inline",
            "registryUrl": "https://futurjs.vercel.app/r/record-inline.json",
            "componentName": "RecordInline",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records/record-inline.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordInlineProps = {};\n\nexport function RecordInline({}: RecordInlineProps) {\n  return <div>RecordInline</div>;\n}\n"
          },
          {
            "title": "RecordCard",
            "description": "",
            "props": {},
            "url": "/prisma/records/record-card",
            "fileName": "record-card.tsx",
            "filePath": "../shared/prisma/records/record-card.tsx",
            "name": "record-card",
            "registryUrl": "https://futurjs.vercel.app/r/record-card.json",
            "componentName": "RecordCard",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/records/record-card.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordCardProps = {};\n\nexport function RecordCard({}: RecordCardProps) {\n  return <div>RecordCard</div>;\n}\n"
          }
        ]
      },
      "views": {
        "name": "views",
        "description": "",
        "url": "/prisma/views",
        "codeDocs": [
          {
            "title": "ViewHoverCard",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-hover-card",
            "fileName": "view-hover-card.tsx",
            "filePath": "../shared/prisma/views/view-hover-card.tsx",
            "name": "view-hover-card",
            "registryUrl": "https://futurjs.vercel.app/r/view-hover-card.json",
            "componentName": "ViewHoverCard",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-hover-card.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewHoverCardProps = {};\n\nexport function ViewHoverCard({}: ViewHoverCardProps) {\n  return <div>ViewHoverCard</div>;\n}\n"
          },
          {
            "title": "ViewAvatar",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-avatar",
            "fileName": "view-avatar.tsx",
            "filePath": "../shared/prisma/views/view-avatar.tsx",
            "name": "view-avatar",
            "registryUrl": "https://futurjs.vercel.app/r/view-avatar.json",
            "componentName": "ViewAvatar",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-avatar.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewAvatarProps = {};\n\nexport function ViewAvatar({}: ViewAvatarProps) {\n  return <div>ViewAvatar</div>;\n}\n"
          },
          {
            "title": "ViewDateTime",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-date-time",
            "fileName": "view-date-time.tsx",
            "filePath": "../shared/prisma/views/view-date-time.tsx",
            "name": "view-date-time",
            "registryUrl": "https://futurjs.vercel.app/r/view-date-time.json",
            "componentName": "ViewDateTime",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-date-time.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewDateTimeProps = {};\n\nexport function ViewDateTime({}: ViewDateTimeProps) {\n  return <div>ViewDateTime</div>;\n}\n"
          },
          {
            "title": "ViewSheet",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-sheet",
            "fileName": "view-sheet.tsx",
            "filePath": "../shared/prisma/views/view-sheet.tsx",
            "name": "view-sheet",
            "registryUrl": "https://futurjs.vercel.app/r/view-sheet.json",
            "componentName": "ViewSheet",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-sheet.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewSheetProps = {};\n\nexport function ViewSheet({}: ViewSheetProps) {\n  return <div>ViewSheet</div>;\n}\n"
          },
          {
            "title": "ViewTag",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-tag",
            "fileName": "view-tag.tsx",
            "filePath": "../shared/prisma/views/view-tag.tsx",
            "name": "view-tag",
            "registryUrl": "https://futurjs.vercel.app/r/view-tag.json",
            "componentName": "ViewTag",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-tag.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewTagProps = {};\n\nexport function ViewTag({}: ViewTagProps) {\n  return <div>ViewTag</div>;\n}\n"
          },
          {
            "title": "ViewCard",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-card",
            "fileName": "view-card.tsx",
            "filePath": "../shared/prisma/views/view-card.tsx",
            "name": "view-card",
            "registryUrl": "https://futurjs.vercel.app/r/view-card.json",
            "componentName": "ViewCard",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-card.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewCardProps = {};\n\nexport function ViewCard({}: ViewCardProps) {\n  return <div>ViewCard</div>;\n}\n"
          },
          {
            "title": "ViewPopover",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-popover",
            "fileName": "view-popover.tsx",
            "filePath": "../shared/prisma/views/view-popover.tsx",
            "name": "view-popover",
            "registryUrl": "https://futurjs.vercel.app/r/view-popover.json",
            "componentName": "ViewPopover",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-popover.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewPopoverProps = {};\n\nexport function ViewPopover({}: ViewPopoverProps) {\n  return <div>ViewPopover</div>;\n}\n"
          },
          {
            "title": "ViewDialog",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-dialog",
            "fileName": "view-dialog.tsx",
            "filePath": "../shared/prisma/views/view-dialog.tsx",
            "name": "view-dialog",
            "registryUrl": "https://futurjs.vercel.app/r/view-dialog.json",
            "componentName": "ViewDialog",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-dialog.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewDialogProps = {};\n\nexport function ViewDialog({}: ViewDialogProps) {\n  return <div>ViewDialog</div>;\n}\n"
          },
          {
            "title": "ViewBlock",
            "description": "",
            "props": {},
            "url": "/prisma/views/view-block",
            "fileName": "view-block.tsx",
            "filePath": "../shared/prisma/views/view-block.tsx",
            "name": "view-block",
            "registryUrl": "https://futurjs.vercel.app/r/view-block.json",
            "componentName": "ViewBlock",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/views/view-block.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type ViewBlockProps = {};\n\nexport function ViewBlock({}: ViewBlockProps) {\n  return <div>ViewBlock</div>;\n}\n"
          }
        ]
      },
      "record-field-relationals": {
        "name": "record-field-relationals",
        "description": "",
        "url": "/prisma/record-field-relationals",
        "codeDocs": [
          {
            "title": "RecordFieldManyToOne",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-many-to-one",
            "fileName": "record-field-many-to-one.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-many-to-one.tsx",
            "name": "record-field-many-to-one",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-many-to-one.json",
            "componentName": "RecordFieldManyToOne",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-many-to-one.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldManyToOneProps = {};\n\nexport function RecordFieldManyToOne({}: RecordFieldManyToOneProps) {\n  return <div>RecordFieldManyToOne</div>;\n}\n"
          },
          {
            "title": "RecordFieldRelationalAuto",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-relational-auto",
            "fileName": "record-field-relational-auto.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-relational-auto.tsx",
            "name": "record-field-relational-auto",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-relational-auto.json",
            "componentName": "RecordFieldRelationalAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-relational-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldRelationalAutoProps = {};\n\nexport function RecordFieldRelationalAuto({}: RecordFieldRelationalAutoProps) {\n  return <div>RecordFieldRelationalAuto</div>;\n}\n"
          },
          {
            "title": "RecordFieldOneToMany",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-one-to-many",
            "fileName": "record-field-one-to-many.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-one-to-many.tsx",
            "name": "record-field-one-to-many",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-one-to-many.json",
            "componentName": "RecordFieldOneToMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-one-to-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldOneToManyProps = {};\n\nexport function RecordFieldOneToMany({}: RecordFieldOneToManyProps) {\n  return <div>RecordFieldOneToMany</div>;\n}\n"
          },
          {
            "title": "RecordFieldManyToMany",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-many-to-many",
            "fileName": "record-field-many-to-many.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-many-to-many.tsx",
            "name": "record-field-many-to-many",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-many-to-many.json",
            "componentName": "RecordFieldManyToMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-many-to-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldManyToManyProps = {};\n\nexport function RecordFieldManyToMany({}: RecordFieldManyToManyProps) {\n  return <div>RecordFieldManyToMany</div>;\n}\n"
          },
          {
            "title": "RecordFieldOneToOne",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-relationals/record-field-one-to-one",
            "fileName": "record-field-one-to-one.tsx",
            "filePath": "../shared/prisma/record-field-relationals/record-field-one-to-one.tsx",
            "name": "record-field-one-to-one",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-one-to-one.json",
            "componentName": "RecordFieldOneToOne",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-relationals/record-field-one-to-one.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldOneToOneProps = {};\n\nexport function RecordFieldOneToOne({}: RecordFieldOneToOneProps) {\n  return <div>RecordFieldOneToOne</div>;\n}\n"
          }
        ]
      },
      "lib": {
        "name": "lib",
        "description": "",
        "url": "/prisma/lib",
        "codeDocs": [
          {
            "title": "createQueryHook",
            "description": "",
            "props": {},
            "url": "/prisma/lib/create-query-hook",
            "fileName": "create-query-hook.ts",
            "filePath": "../shared/prisma/lib/create-query-hook.ts",
            "name": "create-query-hook",
            "registryUrl": "https://futurjs.vercel.app/r/create-query-hook.json",
            "componentName": "CreateQueryHook",
            "demo": [
              {
                "title": "Main",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use client\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  useActionMutation,\n  useActionQuery,\n  useCreateUser,\n  useDeleteUser,\n  useGetUsers,\n  useResetUsers,\n} from \"./client\";\nimport { Button } from \"@/components/ui/button\";\nimport { FakeUser } from \"./action\";\n\nexport type MainProps = {};\n\nexport default function Main({}: MainProps) {\n  const { users, isGetting } = useGetUsers();\n  const { deleteUser, userIdDeleting, isDeleting } = useDeleteUser();\n  const { resetUsers, isResetting } = useResetUsers();\n  const { createUser, isCreating } = useCreateUser();\n  if (isGetting) {\n    return <div>Loading...</div>;\n  }\n  if (isResetting) {\n    return <div>Resetting...</div>;\n  }\n  return (\n    <div>\n      <h1>\n        Users List <Button onClick={() => resetUsers(0)}>reset</Button>{\" \"}\n      </h1>\n      <Card className=\"h-[200px] overflow-auto\">\n        <CardContent>\n          <ul>\n            {users.map((user) => (\n              <li key={user.id} className=\"mb-2\">\n                <strong>{user.name}</strong>- {user.age} - {user.email}{\" \"}\n                <Button\n                  variant=\"destructive\"\n                  size={\"sm\"}\n                  onClick={() => deleteUser(user.id)}\n                  disabled={isDeleting}\n                >\n                  {isDeleting && userIdDeleting === user.id\n                    ? \"Deleting...\"\n                    : \"Delete\"}\n                </Button>\n              </li>\n            ))}\n            {users.length === 0 && <li>No users found.</li>}\n          </ul>\n        </CardContent>\n      </Card>\n      <form\n        action={(data) => {\n          createUser({\n            name: data.get(\"name\") as string,\n            email: data.get(\"email\") as string,\n            age: Number(data.get(\"age\")) || (0 as number),\n            isActive: true,\n          });\n        }}\n        className=\"flex flex-col gap-2 my-4 border p-4 rounded-lg bg-muted/50\"\n      >\n        <input name=\"name\" type=\"text\" placeholder=\"Name\" />\n        <input name=\"email\" type=\"email\" placeholder=\"Email\" />\n        <input name=\"age\" type=\"number\" placeholder=\"Age\" />\n        <Button type=\"submit\">Create User</Button>\n      </form>\n    </div>\n  );\n}\n",
                "filename": "main.tsx",
                "path": "../_exemples/create-query-hook/demo/main.tsx"
              },
              {
                "title": "client.tsx",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use client\";\nimport * as user from \"./action\";\nimport { createQueryHook } from \"@/shared/prisma/lib/create-query-hook\";\n\nexport const { useActionMutation, useActionQuery } = createQueryHook({\n  user,\n});\n\nexport function useGetUsers() {\n  const { data: users = [], isLoading: isGetting } = useActionQuery({\n    queryKey: [\"users\"],\n    queryFn: (db) => db.user.getUsers(),\n  });\n  return { users, isGetting };\n}\n\nexport function useDeleteUser() {\n  const {\n    mutate: deleteUser,\n    variables: userIdDeleting,\n    isPending: isDeleting,\n  } = useActionMutation({\n    invalidateOnSuccess: [[\"users\"]],\n    mutationFn: (id: string, db) => db.user.deleteUser(id),\n  });\n  return { deleteUser, userIdDeleting, isDeleting };\n}\n\nexport function useCreateUser() {\n  const { mutate: createUser, isPending: isCreating } = useActionMutation({\n    invalidateOnSuccess: [[\"users\"]],\n    mutationFn: (user: Omit<user.FakeUser, \"id\">, db) =>\n      db.user.createUser(user),\n  });\n  return { createUser, isCreating };\n}\n\nexport function useUpdateUser() {\n  const { mutate: updateUser, isPending: isUpdating } = useActionMutation({\n    invalidateOnSuccess: [[\"users\"]],\n    mutationFn: (args: { id: string; user: Partial<user.FakeUser> }, db) =>\n      db.user.updateUser(args),\n  });\n  return { updateUser, isUpdating };\n}\n\nexport function useResetUsers() {\n  const { mutate: resetUsers, isPending: isResetting } = useActionMutation({\n    mutationFn: (_, db) => db.user.resetUsers(),\n    invalidateOnSuccess: [[\"users\"]],\n  });\n  return { resetUsers, isResetting };\n}\n",
                "filename": "client.tsx",
                "path": "../_exemples/create-query-hook/demo/client.tsx"
              },
              {
                "title": "action.tsx",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use server\";\n\nexport type FakeUser = {\n  id: string;\n  name: string;\n  email: string;\n  age: number;\n  isActive: boolean;\n};\n\nexport async function getUsers() {\n  return data;\n}\n\nexport async function getUserById(id: string) {\n  return data.find((user) => user.id === id) || null;\n}\n\nexport async function createUser(user: Omit<FakeUser, \"id\">) {\n  const newUser: FakeUser = {\n    id: (data.length + 1).toString(),\n    ...user,\n  };\n  data.push(newUser);\n  return newUser;\n}\n\nexport async function updateUser({\n  id,\n  user,\n}: {\n  id: string;\n  user: Partial<FakeUser>;\n}) {\n  const index = data.findIndex((u) => u.id === id);\n  if (index === -1) {\n    return null;\n  }\n  const updatedUser = { ...data[index], ...user };\n  data[index] = updatedUser;\n  return updatedUser;\n}\n\nexport async function deleteUser(id: string) {\n  const index = data.findIndex((u) => u.id === id);\n  if (index === -1) {\n    return null;\n  }\n  const deletedUser = data[index];\n  data.splice(index, 1);\n  return deletedUser;\n}\nexport async function resetUsers() {\n  data.splice(0, data.length, ...dataDefault);\n\n  return data;\n}\n\nconst dataDefault: FakeUser[] = [\n  {\n    id: \"1\",\n    name: \"John Doe\",\n    email: \"john.doe@example.com\",\n    age: 30,\n    isActive: true,\n  },\n  {\n    id: \"2\",\n    name: \"Jane Smith\",\n    email: \"jane.smith@example.com\",\n    age: 25,\n    isActive: false,\n  },\n  {\n    id: \"3\",\n    name: \"Alice Johnson\",\n    email: \"alice.johnson@example.com\",\n    age: 28,\n    isActive: true,\n  },\n];\n\nconst data = [...dataDefault];\n",
                "filename": "action.tsx",
                "path": "../_exemples/create-query-hook/demo/action.tsx"
              }
            ],
            "exemples": {},
            "target": "@/shared/prisma/lib/create-query-hook.ts",
            "dependencies": [
              "@tanstack/react-query"
            ],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:lib",
            "content": "\"use client\";\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  UseQueryOptions,\n  QueryKey,\n  QueryFunctionContext,\n  DefaultError,\n  UseMutationOptions,\n} from \"@tanstack/react-query\";\n\nexport type FnHookQuery<\n  T,\n  R,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = never\n> = (\n  dbClient: T,\n  context: QueryFunctionContext<TQueryKey, TPageParam>\n) => R | Promise<R>;\n\nexport type UseHookQueryOptions<T, R, TQueryKey extends QueryKey = QueryKey> = {\n  queryFn: FnHookQuery<T, R, TQueryKey>;\n} & Omit<UseQueryOptions<R, DefaultError, R, TQueryKey>, \"queryFn\">;\n\nexport type FnHookMutation<T, TData = unknown, TVariables = unknown> = (\n  variables: TVariables,\n  dbClient: T\n) => Promise<TData>;\n\nexport type UseHookMutationOptions<\n  T,\n  R,\n  TVariables = unknown,\n  TContext = unknown\n> = {\n  mutationFn: FnHookMutation<T, R, TVariables>;\n  invalidateOnSuccess?: QueryKey[];\n} & Omit<\n  UseMutationOptions<R, DefaultError, TVariables, TContext>,\n  \"mutationFn\"\n>;\nexport type FnActionHandler = ((args: any) => any) | ((args?: any) => any);\nexport type ActionHandler = {\n  [modelName: string]: {\n    [methodName: string]: FnActionHandler;\n  };\n};\n\nexport function createQueryHook<T extends ActionHandler>(handler: T) {\n  return {\n    useActionQuery: createUseActionQuery<T>(handler),\n    useActionMutation: createUseActionMutation<T>(handler),\n  };\n}\ncreateQueryHook.dependencies = [\"@tanstack/react-query\"];\n\nfunction createUseActionQuery<T extends object>(handler: T) {\n  return function useDbQuery<R, TQueryKey extends QueryKey = QueryKey>(\n    options: UseHookQueryOptions<T, R, TQueryKey>\n  ) {\n    return useQuery({\n      ...options,\n      queryFn: (context) => options.queryFn(handler, context),\n    });\n  };\n}\n\nfunction createUseActionMutation<T extends object>(handler: T) {\n  return function useDbMutation<R, TVariables = unknown, TContext = unknown>(\n    options: UseHookMutationOptions<T, R, TVariables, TContext>\n  ) {\n    const queryClient = useQueryClient();\n    return useMutation({\n      ...options,\n      mutationFn: (variables) => options.mutationFn(variables, handler),\n      onSuccess(data, variables, context) {\n        if (options.invalidateOnSuccess) {\n          options.invalidateOnSuccess.forEach((key) => {\n            const queryKey = Array.isArray(key) ? key : [key];\n            queryClient.invalidateQueries({ queryKey });\n          });\n        }\n        if (options.onSuccess) {\n          options.onSuccess(data, variables, context);\n        }\n      },\n    });\n  };\n}\n"
          },
          {
            "title": "createDbApiServer",
            "description": "",
            "props": {},
            "url": "/prisma/lib/create-db-api-server",
            "fileName": "create-db-api-server.ts",
            "filePath": "../shared/prisma/lib/create-db-api-server.ts",
            "name": "create-db-api-server",
            "registryUrl": "https://futurjs.vercel.app/r/create-db-api-server.json",
            "componentName": "CreateDbApiServer",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/lib/create-db-api-server.ts",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:lib",
            "content": "export type DbApiServerProps = {\n  modelName: string;\n  methodName: string;\n  args: Record<string, any>;\n};\nexport type DbServer = {\n  [modelName: string]: {\n    [methodName: string]: ((args: any) => any) | ((args?: any) => any);\n  };\n};\n\nexport function createDbApiServer<T extends DbServer>(dbServer: T) {\n  return {\n    handleRequest: async (props: DbApiServerProps) => {\n      const { modelName, methodName, args } = props;\n\n      if (!modelName || !methodName) {\n        throw new Error(\"Model name and method name must be provided.\");\n      }\n      if (typeof modelName !== \"string\" || typeof methodName !== \"string\") {\n        throw new Error(\"Model name and method name must be strings.\");\n      }\n      if (args && (typeof args !== \"object\" || Array.isArray(args))) {\n        throw new Error(\"Args must be an object.\");\n      }\n      if (/^[a-zA-Z0-9_]+$/.test(modelName) === false) {\n        throw new Error(\"Model name contains invalid characters.\");\n      }\n      if (/^[a-zA-Z0-9_]+$/.test(methodName) === false) {\n        throw new Error(\"Method name contains invalid characters.\");\n      }\n      if (!(modelName in dbServer)) {\n        throw new Error(`Model ${modelName} does not exist on the server.`);\n      }\n\n      const model = dbServer[modelName];\n\n      if (!(methodName in model)) {\n        throw new Error(\n          `Method ${methodName} does not exist on model ${modelName}.`\n        );\n      }\n\n      const method = model[methodName];\n\n      if (typeof method !== \"function\") {\n        throw new Error(\n          `${methodName} is not a function on model ${modelName}.`\n        );\n      }\n      try {\n        return {\n          data: await method(args),\n        };\n      } catch (error) {\n        return {\n          error: String(error),\n        };\n      }\n    },\n  };\n}\n"
          },
          {
            "title": "createDbApiClient",
            "description": "",
            "props": {},
            "url": "/prisma/lib/create-db-api-client",
            "fileName": "create-db-api-client.ts",
            "filePath": "../shared/prisma/lib/create-db-api-client.ts",
            "name": "create-db-api-client",
            "registryUrl": "https://futurjs.vercel.app/r/create-db-api-client.json",
            "componentName": "CreateDbApiClient",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/lib/create-db-api-client.ts",
            "dependencies": [
              "axios"
            ],
            "registryDependencies": [
              "create-query-hook"
            ],
            "shadcnDependencies": [],
            "registryType": "registry:lib",
            "content": "\"use client\";\nimport axios, { AxiosError } from \"axios\";\nimport { ActionHandler, createQueryHook } from \"./create-query-hook\";\n\nexport type DbHookPrisma<T = any> = {\n  [K in keyof T as K extends `$${infer R}` ? never : K]: Omit<T[K], \"fields\">;\n};\n\nexport type DbConfig = {\n  baseUrl: string;\n};\n\nexport function createDbApiClient<T extends ActionHandler>(config: DbConfig) {\n  const dbClient = createProxy<T>(config);\n  const queryHook = createQueryHook(dbClient);\n  return {\n    useDbQuery: queryHook.useActionQuery,\n    useDbMutation: queryHook.useActionMutation,\n  };\n}\ncreateDbApiClient.registryDependencies = [\"create-query-hook\"];\ncreateDbApiClient.dependencies = [\"axios\"];\n\nfunction createProxy<T extends object>(config: DbConfig) {\n  return new Proxy(\n    {},\n    {\n      get: (_, modelName) => {\n        return new Proxy(\n          {},\n          {\n            get: (_, methodName) => {\n              return (args: Record<string, any>) => {\n                return fetchDbData(\n                  modelName as string,\n                  methodName as string,\n                  args,\n                  config\n                );\n              };\n            },\n          }\n        );\n      },\n    }\n  ) as T;\n}\n\nasync function fetchDbData<T>(\n  modelName: string,\n  methodName: string,\n  args: Record<string, any>,\n  config: DbConfig\n) {\n  if (!modelName || !methodName) {\n    throw new Error(\"Model name and method name must be provided.\");\n  }\n  try {\n    const res = await axios.post(\n      `${config.baseUrl}/${modelName}/${methodName}`,\n      {\n        args,\n      }\n    );\n    return res.data || null;\n  } catch (error) {\n    const axiosError = error as AxiosError;\n    throw new Error(\n      String(axiosError.response?.data || axiosError.message || String(error))\n    );\n  }\n}\n"
          }
        ]
      },
      "block": {
        "name": "block",
        "description": "",
        "url": "/prisma/block",
        "codeDocs": [
          {
            "title": "SchemaVisualizer",
            "description": "",
            "props": {},
            "url": "/prisma/block/schema-visualizer",
            "fileName": "schema-visualizer.tsx",
            "filePath": "../shared/prisma/block/schema-visualizer.tsx",
            "name": "schema-visualizer",
            "registryUrl": "https://futurjs.vercel.app/r/schema-visualizer.json",
            "componentName": "SchemaVisualizer",
            "demo": [
              {
                "title": "Main",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use client\";\n\nimport { SchemaVisualizer } from \"@/shared/prisma/block/schema-visualizer\";\nimport { usePrismaSchema } from \"@/shared/prisma/hooks/use-prisma-schema\";\n\nexport type MainProps = {};\n\nexport default function Main({}: MainProps) {\n  const { data, isLoading } = usePrismaSchema();\n\n  if (isLoading)\n    return (\n      <div className=\"min-h-[50svh] flex items-center justify-center\">\n        <p>Loading schema...</p>\n      </div>\n    );\n  const { nodes, edges } = data.xyflow;\n  return (\n    <div className=\"min-h-[50svh] flex flex-col\">\n      <SchemaVisualizer initialNodes={nodes} initialEdges={edges} />\n    </div>\n  );\n}\n",
                "filename": "main.tsx",
                "path": "../_exemples/schema-visualizer/demo/main.tsx"
              }
            ],
            "exemples": {
              "With custom node and edge": [
                {
                  "title": "schema-data.ts",
                  "description": "",
                  "props": {},
                  "language": "ts",
                  "content": "import type { Node, Edge } from \"@xyflow/react\";\n\n// Define the initial nodes (tables)\nexport const initialNodes: Node[] = [\n  {\n    id: \"users\",\n    type: \"tableNode\",\n    position: { x: 800, y: 150 },\n    data: {\n      label: \"users\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"full_name\", type: \"varchar\" },\n        { name: \"email\", type: \"varchar\" },\n        { name: \"gender\", type: \"varchar\" },\n        { name: \"date_of_birth\", type: \"date\" },\n        { name: \"country_code\", type: \"varchar\", isForeign: true },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"orders\",\n    type: \"tableNode\",\n    position: { x: 450, y: 183 },\n    data: {\n      label: \"orders\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"user_id\", type: \"int\", isForeign: true },\n        { name: \"status\", type: \"varchar\" },\n        { name: \"total_amount\", type: \"decimal\" },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"order_items\",\n    type: \"tableNode\",\n    position: { x: 100, y: 150 },\n    data: {\n      label: \"order_items\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"order_id\", type: \"int\", isForeign: true },\n        { name: \"product_id\", type: \"int\", isForeign: true },\n        { name: \"quantity\", type: \"int\" },\n        { name: \"unit_price\", type: \"decimal\" },\n      ],\n    },\n  },\n  {\n    id: \"products\",\n    type: \"tableNode\",\n    position: { x: 100, y: 460 },\n    data: {\n      label: \"products\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"merchant_id\", type: \"int\", isForeign: true },\n        { name: \"name\", type: \"varchar\" },\n        { name: \"description\", type: \"text\" },\n        { name: \"price\", type: \"decimal\" },\n        { name: \"status\", type: \"varchar\" },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"merchants\",\n    type: \"tableNode\",\n    position: { x: 450, y: 493 },\n    data: {\n      label: \"merchants\",\n      fields: [\n        { name: \"id\", type: \"int\", isPrimary: true },\n        { name: \"name\", type: \"varchar\" },\n        { name: \"email\", type: \"varchar\" },\n        { name: \"country_code\", type: \"varchar\", isForeign: true },\n        { name: \"created_at\", type: \"timestamp\" },\n      ],\n    },\n  },\n  {\n    id: \"countries\",\n    type: \"tableNode\",\n    position: { x: 800, y: 570 },\n    data: {\n      label: \"countries\",\n      fields: [\n        { name: \"code\", type: \"varchar\", isPrimary: true },\n        { name: \"name\", type: \"varchar\" },\n        { name: \"continent_name\", type: \"varchar\" },\n        { name: \"currency\", type: \"varchar\" },\n        {\n          name: \"nomfdjdgnkdngkdjngkdjngkdngkdngkdngkdngkdngkndkgndk\",\n          type: \"warol\",\n        },\n      ],\n    },\n  },\n];\n\n// Define the edges (relationships) between tables with specific column connections\nexport const initialEdges: Edge[] = [\n  // User to Orders (one-to-many): users.id -> orders.user_id\n  {\n    id: \"users-orders\",\n    source: \"users\",\n    target: \"orders\",\n    sourceHandle: \"id\",\n    targetHandle: \"user_id\",\n  },\n  // Orders to Order Items (one-to-many): orders.id -> order_items.order_id\n  {\n    id: \"orders-order_items\",\n    source: \"orders\",\n    target: \"order_items\",\n    sourceHandle: \"id\",\n    targetHandle: \"order_id\",\n  },\n  // Products to Order Items (one-to-many): products.id -> order_items.product_id\n  {\n    id: \"products-order_items\",\n    source: \"products\",\n    target: \"order_items\",\n    sourceHandle: \"id\",\n    targetHandle: \"product_id\",\n  },\n  // Merchants to Products (one-to-many): merchants.id -> products.merchant_id\n  {\n    id: \"merchants-products\",\n    source: \"merchants\",\n    target: \"products\",\n    sourceHandle: \"id\",\n    targetHandle: \"merchant_id\",\n  },\n  // Countries to Users (one-to-many): countries.code -> users.country_code\n  {\n    id: \"countries-users\",\n    source: \"countries\",\n    target: \"users\",\n    sourceHandle: \"code\",\n    targetHandle: \"country_code\",\n  },\n  // Countries to Merchants (one-to-many): countries.code -> merchants.country_code\n  {\n    id: \"countries-merchants\",\n    source: \"countries\",\n    target: \"merchants\",\n    sourceHandle: \"code\",\n    targetHandle: \"country_code\",\n  },\n];\n",
                  "filename": "schema-data.ts",
                  "path": "../_exemples/schema-visualizer/With custom node and edge/schema-data.ts"
                },
                {
                  "title": "Main",
                  "description": "",
                  "props": {},
                  "language": "tsx",
                  "content": "\"use client\";\n\nimport { initialEdges, initialNodes } from \"./schema-data\";\nimport { SchemaVisualizer } from \"@/shared/prisma/block/schema-visualizer\";\n\nexport type MainProps = {};\n\nexport default function Main({}: MainProps) {\n  return (\n    <div className=\"min-h-[50svh] flex flex-col\">\n      <SchemaVisualizer\n        initialEdges={initialEdges}\n        initialNodes={initialNodes}\n      />\n    </div>\n  );\n}\n",
                  "filename": "main.tsx",
                  "path": "../_exemples/schema-visualizer/With custom node and edge/main.tsx"
                }
              ]
            },
            "target": "@/shared/prisma/block/schema-visualizer.tsx",
            "dependencies": [
              "@tanstack/react-query",
              "@xyflow/react",
              "lucide-react"
            ],
            "registryDependencies": [],
            "shadcnDependencies": [
              "dropdown-menu",
              "tooltip",
              "button"
            ],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { useCallback, useEffect, useRef } from \"react\";\nimport {\n  ReactFlow,\n  ReactFlowProvider,\n  Background,\n  useNodesState,\n  useEdgesState,\n  Panel,\n  useReactFlow,\n  BackgroundVariant,\n  Edge,\n  Node,\n  Handle,\n  Position,\n  NodeProps,\n  BaseEdge,\n  EdgeProps,\n  getSmoothStepPath,\n} from \"@xyflow/react\";\nimport \"@xyflow/react/dist/base.css\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Prisma } from \"@/generated/prisma\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nimport { useState } from \"react\";\n\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Fullscreen, Minus, MoreVertical, Plus } from \"lucide-react\";\n\nSchemaVisualizer.dependencies = [\n  \"@tanstack/react-query\",\n  \"@xyflow/react\",\n  \"lucide-react\",\n];\n\nSchemaVisualizer.shadcnDependencies = [\"dropdown-menu\", \"tooltip\", \"button\"];\n\nconst edgeTypes = {\n  custom: SchemaEdge,\n};\nexport interface TableField {\n  name: string;\n  type: string;\n  isPrimary?: boolean;\n  isForeign?: boolean;\n  meta?: Prisma.DMMF.Field;\n}\n\ninterface TableNodeData extends Record<string, unknown> {\n  label: string;\n  fields: TableField[];\n  selected?: boolean;\n  sourceConnections: string[];\n  targetConnections: string[];\n}\n\ntype TableNodeType = Node<TableNodeData, \"tableNode\">;\n\nexport type SchemaVisualizerProps = {\n  initialNodes: Node[];\n  initialEdges: Edge[];\n};\nfunction FieldName({\n  field,\n  withTooltip,\n}: {\n  field: TableField;\n  withTooltip?: boolean;\n}) {\n  const fieldName = (\n    <span>\n      {field.isForeign && <span title=\"Foreign key\">⛓️</span>}\n      {field.isPrimary && <span title=\"Primary key\">🔑</span>}\n      {field.meta?.kind === \"object\" && (\n        <span className=\"text-blue-400\" title=\"Virtual field\">\n          🔗\n        </span>\n      )}\n      <span>{field.name}</span>\n    </span>\n  );\n  if (!withTooltip) {\n    return fieldName;\n  }\n  return (\n    <TooltipProvider delayDuration={0}>\n      <Tooltip>\n        <TooltipTrigger asChild>{fieldName}</TooltipTrigger>\n        <TooltipContent className=\"py-3 w-50 bg-muted text-foreground border\">\n          <div className=\"space-y-1\">\n            <p className=\"text-[13px] font-medium border-b\">\n              <div className=\"flex items-center justify-between gap-2 py-2 border-dashed group-not-last:border-b\">\n                <span className=\"truncate font-medium\">{fieldName}</span>\n                <span className=\"text-muted-foreground/60\">\n                  {field.type}\n                  {field.meta?.isUnique && (\n                    <span className=\"text-blue-400\" title=\"Unique field\">\n                      !\n                    </span>\n                  )}\n                  {field.meta?.isRequired === false && (\n                    <span className=\"text-blue-400\" title=\"Optional field\">\n                      ?\n                    </span>\n                  )}\n                  {field.meta?.isList && (\n                    <span className=\"text-blue-400\" title=\"List field\">\n                      []\n                    </span>\n                  )}\n                </span>\n              </div>\n            </p>\n            {field.meta?.documentation?.split(\"\\\\n\").map((line, index) => (\n              <p\n                key={index}\n                className=\"text-xs text-muted-foreground border-b border-dashed\"\n              >\n                {line}\n              </p>\n            ))}\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n\ntype Checked = boolean;\nfunction TableNode({ data, id }: NodeProps<TableNodeType>) {\n  const [withTooltip, setWithTooltip] = useState<Checked>(false);\n  const [showVirtualField, setShowVirtualField] = useState<Checked>(false);\n  return (\n    <div\n      className={cn(\n        \"rounded-xl bg-card shadow-[0_1px_1px_rgba(0,0,0,0.02),_0_2px_2px_rgba(0,0,0,0.02),_0_4px_4px_rgba(0,0,0,0.02),_0_8px_8px_rgba(0,0,0,0.02),_0_16px_16px_rgba(0,0,0,0.02),_0_32px_32px_rgba(0,0,0,0.02)] w-66 font-mono\",\n        data.selected ? \"ring-2 ring-primary ring-offset-2\" : \"\"\n      )}\n      style={{\n        border: `.5px solid ${data.color || \"#888\"}`,\n      }}\n    >\n      <div className=\"flex items-center justify-between px-4 py-3 border-b border-border/80 bg-gradient-to-t from-background/70 dark:from-background/30\">\n        <div className=\"flex items-center gap-2 text-[13px]\">\n          <span\n            className=\"w-2 h-2 rounded-full\"\n            style={{ background: String(data.color) }}\n          />\n          <span className=\"text-muted-foreground/80\">/</span>{\" \"}\n          <span className=\"font-medium\">{data.label}</span>\n        </div>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"shadow-none hover:bg-transparent -my-2 -me-2 text-muted-foreground/60 hover:text-muted-foreground\"\n              aria-label=\"Open edit menu\"\n            >\n              <MoreVertical className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            <DropdownMenuCheckboxItem\n              checked={withTooltip}\n              onCheckedChange={setWithTooltip}\n            >\n              Show field tooltips\n            </DropdownMenuCheckboxItem>\n            <DropdownMenuCheckboxItem\n              checked={showVirtualField}\n              onCheckedChange={setShowVirtualField}\n            >\n              Show virtual fields\n            </DropdownMenuCheckboxItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"text-xs py-2\">\n        {data.fields\n          .filter((field) => {\n            if (showVirtualField) return true;\n            return field.meta?.kind !== \"object\";\n          })\n          .map((field: TableField) => {\n            const isPrimaryConnection =\n              field.isPrimary && data.sourceConnections.includes(field.name);\n            const isForeignConnection =\n              field.isForeign && data.targetConnections.includes(field.name);\n            return (\n              <div key={field.name} className=\"px-4 relative group\">\n                <div className=\"flex items-center justify-between gap-2 py-2 border-dashed group-not-last:border-b\">\n                  <span className=\"truncate font-medium\">\n                    <FieldName field={field} withTooltip={withTooltip} />\n                  </span>\n                  <span className=\"text-muted-foreground/60\">\n                    {field.type}\n                    {field.meta?.isUnique && (\n                      <span className=\"text-blue-400\" title=\"Unique field\">\n                        !\n                      </span>\n                    )}\n                    {field.meta?.isRequired === false && (\n                      <span className=\"text-blue-400\" title=\"Optional field\">\n                        ?\n                      </span>\n                    )}\n                    {field.meta?.isList && (\n                      <span className=\"text-blue-400\" title=\"List field\">\n                        []\n                      </span>\n                    )}\n                  </span>\n\n                  {/* Field handles */}\n                  {(isPrimaryConnection || isForeignConnection) && (\n                    <Handle\n                      type={field.isPrimary ? \"source\" : \"target\"}\n                      position={\n                        field.isPrimary ? Position.Left : Position.Right\n                      }\n                      id={field.name}\n                      className=\"size-2.5 rounded-full bg-foreground! border-2 border-background\"\n                      isConnectable={false}\n                    />\n                  )}\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\nconst { nodeTypes } = {\n  nodeTypes: {\n    tableNode: TableNode,\n  },\n};\nfunction SchemaVisualizerInner({\n  initialNodes,\n  initialEdges,\n}: SchemaVisualizerProps) {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const reactFlowWrapper = useRef<HTMLDivElement>(null);\n  const { fitView, zoomIn, zoomOut } = useReactFlow();\n\n  useEffect(() => setNodes(initialNodes), [initialNodes, setNodes]);\n  useEffect(() => setEdges(initialEdges), [initialEdges, setEdges]);\n\n  const onFitView = useCallback(() => {\n    fitView({ padding: 0.2 });\n  }, [fitView]);\n\n  return (\n    <main className=\"flex-1 flex items-stretch\">\n      <div className=\"w-full\" ref={reactFlowWrapper}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          nodeTypes={nodeTypes}\n          edgeTypes={edgeTypes}\n          fitView\n          minZoom={0.5}\n          maxZoom={1}\n          defaultEdgeOptions={{\n            type: \"custom\",\n            className: \"opacity-25\",\n          }}\n          style={\n            {\n              \"--xy-background-pattern-dots-color-default\":\n                \"var(--color-border)\",\n              \"--xy-edge-stroke-width-default\": 1.5,\n              \"--xy-edge-stroke-default\": \"var(--color-foreground)\",\n              \"--xy-edge-stroke-selected-default\": \"var(--color-foreground)\",\n              \"--xy-attribution-background-color-default\": \"transparent\",\n            } as React.CSSProperties\n          }\n          attributionPosition=\"bottom-left\"\n        >\n          <Background variant={BackgroundVariant.Dots} gap={20} size={2} />\n\n          <Panel\n            position=\"bottom-right\"\n            className=\"inline-flex -space-x-px rounded-md shadow-xs rtl:space-x-reverse\"\n          >\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"text-muted-foreground/80 hover:text-muted-foreground rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg size-10 focus-visible:z-10 bg-card\"\n              onClick={() => zoomIn()}\n              aria-label=\"Zoom in\"\n            >\n              <Plus className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"text-muted-foreground/80 hover:text-muted-foreground rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg size-10 focus-visible:z-10 bg-card\"\n              onClick={() => zoomOut()}\n              aria-label=\"Zoom out\"\n            >\n              <Minus className=\"size-5\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"text-muted-foreground/80 hover:text-muted-foreground rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg size-10 focus-visible:z-10 bg-card\"\n              onClick={onFitView}\n              aria-label=\"Fit view\"\n            >\n              <Fullscreen className=\"size-5\" aria-hidden=\"true\" />\n              {/* <RiFullscreenLine className=\"size-5\" aria-hidden=\"true\" /> */}\n            </Button>\n          </Panel>\n          {/* <MiniMap\n            nodeColor={(node) => (node.data as any)?.color || \"#999\"}\n            nodeStrokeWidth={2}\n            // maskColor=\"#00000010\"\n          /> */}\n        </ReactFlow>\n      </div>\n    </main>\n  );\n}\n\nexport function SchemaVisualizer(props: SchemaVisualizerProps) {\n  const { initialNodes, initialEdges } = props;\n\n  props.initialNodes.map((node) => {\n    if (node.type === \"tableNode\") {\n      const data = node.data as TableNodeData;\n\n      // Find all source connections for this node\n      const sourceConnections = initialEdges\n        .filter((edge) => edge.source === node.id)\n        .map((edge) => edge.sourceHandle);\n\n      // Find all target connections for this node\n      const targetConnections = initialEdges\n        .filter((edge) => edge.target === node.id)\n        .map((edge) => edge.targetHandle);\n\n      data.sourceConnections = sourceConnections as string[];\n      data.targetConnections = targetConnections as string[];\n    }\n  });\n  return (\n    <ReactFlowProvider>\n      <SchemaVisualizerInner\n        initialEdges={props.initialEdges}\n        initialNodes={props.initialNodes}\n      />\n    </ReactFlowProvider>\n  );\n}\n\nfunction SchemaEdge({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  markerEnd,\n}: EdgeProps) {\n  const [edgePath] = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    sourcePosition: sourcePosition || Position.Bottom,\n    targetX,\n    targetY,\n    targetPosition: targetPosition || Position.Top,\n    borderRadius: 8, // Increased border radius for smoother corners\n  });\n\n  return <BaseEdge path={edgePath} style={style} markerEnd={markerEnd} />;\n}\n"
          }
        ]
      },
      "hooks": {
        "name": "hooks",
        "description": "",
        "url": "/prisma/hooks",
        "codeDocs": [
          {
            "title": "usePrismaSchema",
            "description": "",
            "props": {},
            "url": "/prisma/hooks/use-prisma-schema",
            "fileName": "use-prisma-schema.tsx",
            "filePath": "../shared/prisma/hooks/use-prisma-schema.tsx",
            "name": "use-prisma-schema",
            "registryUrl": "https://futurjs.vercel.app/r/use-prisma-schema.json",
            "componentName": "UsePrismaSchema",
            "demo": [
              {
                "title": "Main",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use client\";\n\nimport { usePrismaSchema } from \"@/shared/prisma/hooks/use-prisma-schema\";\n\nexport type MainProps = {};\n\nexport default function Main({}: MainProps) {\n  const { data, isLoading } = usePrismaSchema();\n  return (\n    <div>\n      {isLoading && <p>Loading...</p>}\n      {data && (\n        <pre className=\"h-[50svh] flex flex-col overflow-auto\">\n          {JSON.stringify(data, null, 2)}\n        </pre>\n      )}\n    </div>\n  );\n}\n",
                "filename": "main.tsx",
                "path": "../_exemples/use-prisma-schema/demo/main.tsx"
              }
            ],
            "exemples": {},
            "target": "@/shared/prisma/hooks/use-prisma-schema.tsx",
            "dependencies": [
              "@tanstack/react-query",
              "@xyflow/react"
            ],
            "registryDependencies": [
              "prisma-actions"
            ],
            "shadcnDependencies": [],
            "registryType": "registry:hook",
            "content": "\"use client\";\n\nimport { Prisma } from \"@/generated/prisma\";\nimport { Edge, Node } from \"@xyflow/react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getPrismaSchema } from \"@/shared/prisma/actions/prisma-actions\";\nimport z, { ZodEnum, ZodType } from \"zod/v4\";\n\nexport type FieldMeta = {\n  enumProps: Prisma.DMMF.Datamodel[\"enums\"][number];\n  description: string;\n  label: string;\n  placeholder: string;\n  allowDuplicates?: boolean;\n  maxItems?: number;\n};\nexport type FormMeta = {};\nexport type EnumMeta = {};\n\nexport type FormModel = {\n  name: string;\n  fields: FormModelField[];\n  meta: Partial<FormMeta>;\n  zodType: z.ZodObject<any>;\n};\n\nexport type FormModelField = {\n  props: Prisma.DMMF.Field;\n  zodType: ZodType<any, any, any>;\n  meta?: Partial<FieldMeta>;\n};\n\nexport type FormEnum = {\n  name: string;\n  props: Prisma.DMMF.Datamodel[\"enums\"][number];\n  zodType: ZodEnum<any>;\n  meta?: Partial<EnumMeta>;\n};\n\nexport type PrismaForm = {\n  models: FormModel[];\n  enums: FormEnum[];\n};\n\nexport type PrismaSchema = {\n  datamodel: Prisma.DMMF.Datamodel;\n  xyflow: {\n    nodes: Node[];\n    edges: Edge[];\n  };\n  form: PrismaForm;\n};\n\nexport function datamodelToPrismaFormModel(\n  datamodel: Prisma.DMMF.Datamodel,\n  enums: FormEnum[]\n): FormModel[] {\n  const models = datamodel.models.map((model) => {\n    const zodfields: Record<string, z.ZodType<any, any, any>> = {};\n    console.log(\"model:\", model);\n\n    return {\n      name: model.name,\n      meta: {},\n      fields: model.fields\n        .map((field) => {\n          if (field.isId) return null;\n          if (field.isReadOnly) return null;\n          if (field.isUpdatedAt) return null;\n          if (field.hasDefaultValue) {\n            if (typeof field.default === \"object\" && \"name\" in field.default) {\n              if (\n                field.default.name === \"now\" ||\n                field.default.name === \"cuid\" ||\n                field.default.name === \"uuid\" ||\n                field.default.name === \"autoincrement\" ||\n                field.default.name === \"updatedAt\"\n              ) {\n                return null; // Skip rendering if default value is now, cuid, or uuid\n              }\n            }\n          }\n          console.log(\"  field:\", field.name);\n          zodfields[field.name] = prismaFieldToZodType(field, enums);\n          return {\n            props: field,\n            zodType: zodfields[field.name],\n            meta: {\n              enumProps:\n                field.kind === \"enum\"\n                  ? enums.find((e) => e.name === field.type)?.props\n                  : undefined,\n            },\n          };\n        })\n        .filter(Boolean) as FormModelField[], // Filter out null fields\n      // Filter out empty fields\n      zodType: z.object(zodfields),\n    };\n  });\n  console.log(\"==FINISH==\");\n\n  return models;\n}\n\nfunction prismaFieldToZodType(\n  field: Prisma.DMMF.Field,\n  enums: FormEnum[]\n): ZodType<any, any, any> {\n  // BigInt, Boolean, Bytes, DateTime, Decimal, Float, Int, JSON, String, $ModelName\n  const scalarTypes = new Map<string, ZodType<any, any, any>>();\n  scalarTypes.set(\"BigInt\", z.bigint());\n  scalarTypes.set(\"Boolean\", z.boolean());\n  scalarTypes.set(\"Bytes\", z.instanceof(Buffer));\n  scalarTypes.set(\"DateTime\", z.date());\n  scalarTypes.set(\n    \"Decimal\",\n    z.number().refine((val) => !isNaN(val), {\n      message: \"Invalid decimal value\",\n    })\n  );\n  scalarTypes.set(\n    \"Float\",\n    z.number().refine((val) => !isNaN(val), {\n      message: \"Invalid float value\",\n    })\n  );\n  scalarTypes.set(\n    \"Int\",\n    z\n      .number()\n      .int()\n      .refine((val) => !isNaN(val), {\n        message: \"Invalid integer value\",\n      })\n  );\n  scalarTypes.set(\"JSON\", z.any());\n  scalarTypes.set(\"String\", z.string());\n  const type =\n    scalarTypes.get(field.type)?.clone() ||\n    enums.find((e) => e.name === field.type)?.zodType ||\n    z.any();\n  if (field.isList) {\n    return z.array(type);\n  }\n  if (field.isRequired) {\n    return type;\n  }\n  return type.optional();\n}\n\nexport const defaultPrismaSchema: PrismaSchema = {\n  datamodel: {\n    models: [],\n    enums: [],\n    indexes: [],\n    types: [],\n  },\n  xyflow: {\n    nodes: [],\n    edges: [],\n  },\n  form: {\n    models: [],\n    enums: [],\n  },\n};\n\nexport function usePrismaSchema() {\n  const { data, isLoading } = useQuery({\n    queryKey: [\"prisma-schema\"],\n    queryFn: async () => {\n      const datamodel = await getPrismaSchema();\n      const schema: PrismaSchema = {\n        datamodel,\n        xyflow: datamodelToXyflow(datamodel),\n        form: datamodelToPrismaForm(datamodel),\n      };\n      return schema;\n    },\n    // refetchOnWindowFocus: false,\n    // refetchOnReconnect: false,\n  });\n  if (!data)\n    return {\n      isLoading,\n      data: defaultPrismaSchema,\n    };\n  return {\n    isLoading,\n    data,\n  };\n}\n\nusePrismaSchema.registryDependencies = [\"prisma-actions\"];\nusePrismaSchema.dependencies = [\"@tanstack/react-query\", \"@xyflow/react\"];\n\nfunction getStableColor(modelName: string): string {\n  const hash = [...modelName].reduce((acc, c) => acc + c.charCodeAt(0), 0);\n  const hue = hash % 360;\n  return `hsl(${hue}, 70%, 60%)`;\n}\n\nexport function datamodelToXyflow(datamodel: Prisma.DMMF.Datamodel): {\n  nodes: Node[];\n  edges: Edge[];\n} {\n  const modelColorMap = new Map<string, string>();\n  const numColumns = 6;\n  const columnWidth = 300;\n  const columnHeights = new Array(numColumns).fill(100); // start y=100 pour chaque colonne\n\n  const nodes: Node[] = datamodel.models.map((model, i) => {\n    const height = model.fields.length * 30 + 100;\n\n    // Trouver la colonne la moins haute\n    const minCol = columnHeights.indexOf(Math.min(...columnHeights));\n    const x = minCol * columnWidth;\n    const y = columnHeights[minCol];\n\n    columnHeights[minCol] += height + 50; // 50px de marge verticale\n\n    const color = getStableColor(model.name);\n    modelColorMap.set(model.name, color);\n\n    return {\n      id: model.name,\n      type: \"tableNode\",\n      position: { x, y },\n      data: {\n        label: model.name,\n        color,\n        fields: model.fields.map((field) => ({\n          name: field.name,\n          type: field.type,\n          isPrimary: field.isId,\n          isForeign: field.isReadOnly,\n          meta: field,\n        })),\n      },\n    };\n  });\n\n  const edges: Edge[] = datamodel.models.flatMap((model) => {\n    return model.fields\n      .filter(\n        (field) =>\n          field.relationName &&\n          field?.relationFromFields?.length &&\n          field?.relationToFields?.length\n      )\n      .map((field) => {\n        return {\n          id: `${field.relationName}`,\n          source: field.type,\n          target: model.name,\n          sourceHandle: field?.relationToFields?.at(0),\n          targetHandle: field?.relationFromFields?.at(0),\n          animated: true,\n          // style: {\n          //   stroke: modelColorMap.get(model.name) || \"#999\",\n          // },\n        };\n      });\n  });\n\n  return { nodes, edges };\n}\n\nexport function datamodelToPrismaForm(\n  datamodel: Prisma.DMMF.Datamodel\n): PrismaForm {\n  const enums = datamodelToPrismaFormEnums(datamodel);\n  return {\n    enums,\n    models: datamodelToPrismaFormModel(datamodel, enums),\n  };\n}\n\nexport function datamodelToPrismaFormEnums(\n  datamodel: Prisma.DMMF.Datamodel\n): FormEnum[] {\n  return datamodel.enums.map((enumItem) => {\n    return {\n      name: enumItem.name,\n      props: enumItem,\n      zodType: z.enum(\n        enumItem.values.map((value) => value.name) as [string, ...string[]]\n      ),\n      meta: {},\n    };\n  });\n}\n"
          }
        ]
      },
      "record-field-lists": {
        "name": "record-field-lists",
        "description": "",
        "url": "/prisma/record-field-lists",
        "codeDocs": [
          {
            "title": "RecordFieldScalar",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-lists/record-field-scalar",
            "fileName": "record-field-scalar.tsx",
            "filePath": "../shared/prisma/record-field-lists/record-field-scalar.tsx",
            "name": "record-field-scalar",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-scalar.json",
            "componentName": "RecordFieldScalar",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-lists/record-field-scalar.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldScalarProps = {};\n\nexport function RecordFieldScalar({}: RecordFieldScalarProps) {\n  return <div>RecordFieldScalar</div>;\n}\n"
          },
          {
            "title": "RecordFieldListAuto",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-lists/record-field-list-auto",
            "fileName": "record-field-list-auto.tsx",
            "filePath": "../shared/prisma/record-field-lists/record-field-list-auto.tsx",
            "name": "record-field-list-auto",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-list-auto.json",
            "componentName": "RecordFieldListAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-lists/record-field-list-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldListAutoProps = {};\n\nexport function RecordFieldListAuto({}: RecordFieldListAutoProps) {\n  return <div>RecordFieldListAuto</div>;\n}\n"
          },
          {
            "title": "RecordFieldListRelational",
            "description": "",
            "props": {},
            "url": "/prisma/record-field-lists/record-field-list-relational",
            "fileName": "record-field-list-relational.tsx",
            "filePath": "../shared/prisma/record-field-lists/record-field-list-relational.tsx",
            "name": "record-field-list-relational",
            "registryUrl": "https://futurjs.vercel.app/r/record-field-list-relational.json",
            "componentName": "RecordFieldListRelational",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/record-field-lists/record-field-list-relational.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type RecordFieldListRelationalProps = {};\n\nexport function RecordFieldListRelational({}: RecordFieldListRelationalProps) {\n  return <div>RecordFieldListRelational</div>;\n}\n"
          }
        ]
      },
      "pages": {
        "name": "pages",
        "description": "",
        "url": "/prisma/pages",
        "codeDocs": [
          {
            "title": "PageRecordList",
            "description": "",
            "props": {},
            "url": "/prisma/pages/page-record-list",
            "fileName": "page-record-list.tsx",
            "filePath": "../shared/prisma/pages/page-record-list.tsx",
            "name": "page-record-list",
            "registryUrl": "https://futurjs.vercel.app/r/page-record-list.json",
            "componentName": "PageRecordList",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/pages/page-record-list.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type PageRecordListProps = {};\n\nexport function PageRecordList({}: PageRecordListProps) {\n  return <div>PageRecordList</div>;\n}\n"
          },
          {
            "title": "PageRecord",
            "description": "",
            "props": {},
            "url": "/prisma/pages/page-record",
            "fileName": "page-record.tsx",
            "filePath": "../shared/prisma/pages/page-record.tsx",
            "name": "page-record",
            "registryUrl": "https://futurjs.vercel.app/r/page-record.json",
            "componentName": "PageRecord",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/pages/page-record.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type PageRecordProps = {};\n\nexport function PageRecord({}: PageRecordProps) {\n  return <div>PageRecord</div>;\n}\n"
          },
          {
            "title": "PageDatabase",
            "description": "",
            "props": {},
            "url": "/prisma/pages/page-database",
            "fileName": "page-database.tsx",
            "filePath": "../shared/prisma/pages/page-database.tsx",
            "name": "page-database",
            "registryUrl": "https://futurjs.vercel.app/r/page-database.json",
            "componentName": "PageDatabase",
            "demo": [],
            "exemples": {},
            "target": "@/shared/prisma/pages/page-database.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type PageDatabaseProps = {};\n\nexport function PageDatabase({}: PageDatabaseProps) {\n  return <div>PageDatabase</div>;\n}\n"
          }
        ]
      }
    },
    "url": "/prisma"
  },
  "auto-form": {
    "name": "auto-form",
    "description": "",
    "packages": {
      "forms": {
        "name": "forms",
        "description": "",
        "url": "/auto-form/forms",
        "codeDocs": [
          {
            "title": "FormAuto",
            "description": "",
            "props": {},
            "url": "/auto-form/forms/form-auto",
            "fileName": "form-auto.tsx",
            "filePath": "../shared/auto-form/forms/form-auto.tsx",
            "name": "form-auto",
            "registryUrl": "https://futurjs.vercel.app/r/form-auto.json",
            "componentName": "FormAuto",
            "demo": [
              {
                "title": "Main",
                "description": "",
                "props": {},
                "language": "tsx",
                "content": "\"use client\";\n\nimport { FormAuto } from \"@/shared/auto-form/forms/form-auto\";\n\nexport type MainProps = {};\n\nexport default function Main({}: MainProps) {\n  return (\n    <div>\n      <FormAuto />\n    </div>\n  );\n}\n",
                "filename": "main.tsx",
                "path": "../_exemples/form-auto/demo/main.tsx"
              }
            ],
            "exemples": {},
            "target": "@/shared/auto-form/forms/form-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\nimport * as z from \"zod/v4\";\nexport type FormAutoProps = {};\nimport JsonView from \"@uiw/react-json-view\";\nimport { JsonViewVscode } from \"@/components/json-view-vscode\";\nimport { usePrismaSchema } from \"@/shared/prisma/hooks/use-prisma-schema\";\nimport { FieldAuto } from \"../field-scalars/field-auto\";\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport React from \"react\";\nimport { FormRoot } from \"./form-root\";\nimport { dbSchema } from \"@/shared/db-tools/db-schema/dbSchema\";\n\nexport function FormAuto({}: FormAutoProps) {\n  // const { data, isLoading } = usePrismaSchema();\n  const [modelName, setModelName] = React.useState(\"User\");\n  // if (isLoading)\n  //   return <div>state: {isLoading ? \"chargement...\" : \"finish\"}</div>;\n  // const model = data.form.models.find((model) => model.name === modelName);\n  const { models } = dbSchema;\n  const model = models.find((model) => model.name === modelName);\n  const selectModel = (\n    <Select onValueChange={setModelName} value={modelName}>\n      <SelectTrigger className=\"w-[180px]\">\n        <SelectValue placeholder=\"Select a fruit\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          {models.map((model) => (\n            <SelectItem key={model.name} value={model.name}>\n              {model.name}\n            </SelectItem>\n          ))}\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  );\n  if (!model) {\n    return (\n      <div>\n        {selectModel}\n        model not Found!\n      </div>\n    );\n  }\n  return (\n    <div>\n      {selectModel}\n      <br />\n      <div className=\"border p-4 rounded-md \">\n        <FormRoot\n          key={model.name}\n          model={model}\n          onSubmit={(data) => console.log(data)}\n        />\n      </div>\n    </div>\n  );\n}\n"
          },
          {
            "title": "FormUpdateMany",
            "description": "",
            "props": {},
            "url": "/auto-form/forms/form-update-many",
            "fileName": "form-update-many.tsx",
            "filePath": "../shared/auto-form/forms/form-update-many.tsx",
            "name": "form-update-many",
            "registryUrl": "https://futurjs.vercel.app/r/form-update-many.json",
            "componentName": "FormUpdateMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/forms/form-update-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormUpdateManyProps = {};\n\nexport function FormUpdateMany({}: FormUpdateManyProps) {\n  return <div>FormUpdateMany</div>;\n}\n"
          },
          {
            "title": "FormCreateMany",
            "description": "",
            "props": {},
            "url": "/auto-form/forms/form-create-many",
            "fileName": "form-create-many.tsx",
            "filePath": "../shared/auto-form/forms/form-create-many.tsx",
            "name": "form-create-many",
            "registryUrl": "https://futurjs.vercel.app/r/form-create-many.json",
            "componentName": "FormCreateMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/forms/form-create-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormCreateManyProps = {};\n\nexport function FormCreateMany({}: FormCreateManyProps) {\n  return <div>FormCreateMany</div>;\n}\n"
          },
          {
            "title": "FormDelete",
            "description": "",
            "props": {},
            "url": "/auto-form/forms/form-delete",
            "fileName": "form-delete.tsx",
            "filePath": "../shared/auto-form/forms/form-delete.tsx",
            "name": "form-delete",
            "registryUrl": "https://futurjs.vercel.app/r/form-delete.json",
            "componentName": "FormDelete",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/forms/form-delete.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormDeleteProps = {};\n\nexport function FormDelete({}: FormDeleteProps) {\n  return <div>FormDelete</div>;\n}\n"
          },
          {
            "title": "FormCreate",
            "description": "",
            "props": {},
            "url": "/auto-form/forms/form-create",
            "fileName": "form-create.tsx",
            "filePath": "../shared/auto-form/forms/form-create.tsx",
            "name": "form-create",
            "registryUrl": "https://futurjs.vercel.app/r/form-create.json",
            "componentName": "FormCreate",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/forms/form-create.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormCreateProps = {};\n\nexport function FormCreate({}: FormCreateProps) {\n  return <div>FormCreate</div>;\n}\n"
          },
          {
            "title": "FormRoot",
            "description": "",
            "props": {},
            "url": "/auto-form/forms/form-root",
            "fileName": "form-root.tsx",
            "filePath": "../shared/auto-form/forms/form-root.tsx",
            "name": "form-root",
            "registryUrl": "https://futurjs.vercel.app/r/form-root.json",
            "componentName": "FormRoot",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/forms/form-root.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { FormModel } from \"@/shared/prisma/hooks/use-prisma-schema\";\nimport { FieldAuto } from \"../field-scalars/field-auto\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod/v4\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nexport type FormRootProps = {\n  model: FormModel;\n  defaultValues?: object;\n  onSubmit: (data: object) => void;\n};\n\nexport function FormRoot({ model, defaultValues, onSubmit }: FormRootProps) {\n  const resolver = zodResolver(model.zodType);\n  const form = useForm<z.infer<typeof model.zodType>>({\n    resolver: async (val, ...ctx) => {\n      console.log(\"resolver\", val);\n      const result = resolver(val, ...ctx);\n      console.log(\"result\", await result);\n\n      return result;\n    },\n    defaultValues: defaultValues,\n  });\n  return (\n    <div>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-1\">\n          {model.fields.map((field) => {\n            return (\n              <FieldAuto\n                key={field.props.name}\n                fieldSchema={field}\n                form={form}\n              />\n            );\n          })}\n          <Button type=\"submit\">Submit</Button>\n        </form>\n      </Form>\n    </div>\n  );\n}\n"
          },
          {
            "title": "FormUpdate",
            "description": "",
            "props": {},
            "url": "/auto-form/forms/form-update",
            "fileName": "form-update.tsx",
            "filePath": "../shared/auto-form/forms/form-update.tsx",
            "name": "form-update",
            "registryUrl": "https://futurjs.vercel.app/r/form-update.json",
            "componentName": "FormUpdate",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/forms/form-update.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FormUpdateProps = {};\n\nexport function FormUpdate({}: FormUpdateProps) {\n  return <div>FormUpdate</div>;\n}\n"
          }
        ]
      },
      "field-scalars": {
        "name": "field-scalars",
        "description": "",
        "url": "/auto-form/field-scalars",
        "codeDocs": [
          {
            "title": "FieldRoot",
            "description": "",
            "props": {},
            "url": "/auto-form/field-scalars/field-root",
            "fileName": "field-root.tsx",
            "filePath": "../shared/auto-form/field-scalars/field-root.tsx",
            "name": "field-root",
            "registryUrl": "https://futurjs.vercel.app/r/field-root.json",
            "componentName": "FieldRoot",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-scalars/field-root.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { FormModelField } from \"@/shared/prisma/hooks/use-prisma-schema\";\nimport { ControllerRenderProps, UseFormReturn } from \"react-hook-form\";\n\nexport type FieldRootRenderProps = {\n  fieldSchema: FormModelField;\n  form: UseFormReturn<Record<string, any>, any, Record<string, any>>;\n  field: ControllerRenderProps<Record<string, any>, string>;\n};\nexport type FieldRootProps = {\n  fieldSchema: FormModelField;\n  form: UseFormReturn<Record<string, any>, any, Record<string, any>>;\n  render?: (field: FieldRootRenderProps) => React.ReactNode;\n  inputProps?: React.ComponentProps<\"input\">;\n};\n\nexport function FieldRoot({\n  fieldSchema,\n  form,\n  render,\n  inputProps,\n}: FieldRootProps) {\n  return (\n    <FormField\n      control={form.control}\n      name={fieldSchema.props.name}\n      render={({ field }) => {\n        const fieldInfo = getFieldInfo({ fieldSchema, form, field });\n        return (\n          <>\n            {render ? (\n              render({ fieldSchema: fieldSchema, form, field })\n            ) : (\n              <FormItem>\n                <FormLabel>{fieldInfo.label}</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    placeholder={fieldInfo.placeholder}\n                    {...inputProps}\n                  />\n                </FormControl>\n                <FormDescription>{fieldInfo.description}</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          </>\n        );\n      }}\n    />\n  );\n}\n\nexport function getFieldInfo(field: FieldRootRenderProps) {\n  return {\n    name: field.fieldSchema.props.name,\n    description: field.fieldSchema.meta?.description || \"\",\n    label: field.fieldSchema.meta?.label || field.fieldSchema.props.name,\n    placeholder: field.fieldSchema.meta?.placeholder || \"\",\n    required: field.fieldSchema.props.isRequired || false,\n  };\n}\n"
          },
          {
            "title": "FieldEnum",
            "description": "",
            "props": {},
            "url": "/auto-form/field-scalars/field-enum",
            "fileName": "field-enum.tsx",
            "filePath": "../shared/auto-form/field-scalars/field-enum.tsx",
            "name": "field-enum",
            "registryUrl": "https://futurjs.vercel.app/r/field-enum.json",
            "componentName": "FieldEnum",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-scalars/field-enum.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { FieldRoot, FieldRootProps } from \"./field-root\";\nimport {\n  FormControl,\n  FormDescription,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport Link from \"next/link\";\n\nexport type FieldEnumProps = FieldRootProps;\n\nexport function FieldEnum(props: FieldEnumProps) {\n  return (\n    <FieldRoot\n      {...props}\n      render={({ form, field, fieldSchema }) => {\n        return (\n          <FormItem>\n            <FormLabel>{fieldSchema.props.name}</FormLabel>\n            <Select onValueChange={field.onChange} defaultValue={field.value}>\n              <FormControl>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue />\n                </SelectTrigger>\n              </FormControl>\n              <SelectContent>\n                {fieldSchema.meta?.enumProps?.values.map((value) => (\n                  <SelectItem key={value.name} value={value.name}>\n                    {value.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <FormDescription></FormDescription>\n            <FormMessage />\n          </FormItem>\n        );\n      }}\n    />\n  );\n}\n"
          },
          {
            "title": "FieldString",
            "description": "",
            "props": {},
            "url": "/auto-form/field-scalars/field-string",
            "fileName": "field-string.tsx",
            "filePath": "../shared/auto-form/field-scalars/field-string.tsx",
            "name": "field-string",
            "registryUrl": "https://futurjs.vercel.app/r/field-string.json",
            "componentName": "FieldString",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-scalars/field-string.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { FieldRoot, FieldRootProps } from \"./field-root\";\n\n// string\n// text\n// password\n// password-create\n// email\n// url\n// json\n// otp\n// description\nexport type FieldStringProps = FieldRootProps;\n\nexport function FieldString(props: FieldStringProps) {\n  return <FieldRoot {...props} />;\n}\n"
          },
          {
            "title": "FieldDateTime",
            "description": "",
            "props": {},
            "url": "/auto-form/field-scalars/field-date-time",
            "fileName": "field-date-time.tsx",
            "filePath": "../shared/auto-form/field-scalars/field-date-time.tsx",
            "name": "field-date-time",
            "registryUrl": "https://futurjs.vercel.app/r/field-date-time.json",
            "componentName": "FieldDateTime",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-scalars/field-date-time.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { FieldRoot, FieldRootProps } from \"./field-root\";\n\n// date time\n// date\n// time\n// timestamp\nexport type FieldDateTimeProps = FieldRootProps;\n\nexport function FieldDateTime(props: FieldDateTimeProps) {\n  return <FieldRoot {...props} />;\n}\n"
          },
          {
            "title": "FieldNumber",
            "description": "",
            "props": {},
            "url": "/auto-form/field-scalars/field-number",
            "fileName": "field-number.tsx",
            "filePath": "../shared/auto-form/field-scalars/field-number.tsx",
            "name": "field-number",
            "registryUrl": "https://futurjs.vercel.app/r/field-number.json",
            "componentName": "FieldNumber",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-scalars/field-number.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { FieldRoot, FieldRootProps } from \"./field-root\";\n\n// big int\n// int\n// float\n// decimal\nexport type FieldNumberProps = FieldRootProps;\n\nexport function FieldNumber(props: FieldNumberProps) {\n  return <FieldRoot {...props} inputProps={{ type: \"number\" }} />;\n}\n"
          },
          {
            "title": "FieldRange",
            "description": "",
            "props": {},
            "url": "/auto-form/field-scalars/field-range",
            "fileName": "field-range.tsx",
            "filePath": "../shared/auto-form/field-scalars/field-range.tsx",
            "name": "field-range",
            "registryUrl": "https://futurjs.vercel.app/r/field-range.json",
            "componentName": "FieldRange",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-scalars/field-range.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { FieldRoot, FieldRootProps } from \"./field-root\";\n\n// range date time\n// range date\n// range time\n// range timestamp\n// range int\n// range float\n// range decimal\n// range big int\nexport type FieldRangeProps = FieldRootProps;\n\nexport function FieldRange(props: FieldRangeProps) {\n  return <FieldRoot {...props} />;\n}\n"
          },
          {
            "title": "FieldAuto",
            "description": "",
            "props": {},
            "url": "/auto-form/field-scalars/field-auto",
            "fileName": "field-auto.tsx",
            "filePath": "../shared/auto-form/field-scalars/field-auto.tsx",
            "name": "field-auto",
            "registryUrl": "https://futurjs.vercel.app/r/field-auto.json",
            "componentName": "FieldAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-scalars/field-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { FormModelField } from \"@/shared/prisma/hooks/use-prisma-schema\";\nimport { FieldString } from \"./field-string\";\nimport { FieldBoolean } from \"./field-boolean\";\nimport { FieldBytes } from \"./field-bytes\";\nimport { FieldDateTime } from \"./field-date-time\";\nimport { FieldNumber } from \"./field-number\";\nimport { FieldEnum } from \"./field-enum\";\nimport { FieldRelationalAuto } from \"../field-relationals/field-relational-auto\";\nimport { FieldRoot, FieldRootProps } from \"./field-root\";\nimport { UseFormReturn } from \"react-hook-form\";\nimport { FieldListAuto } from \"../field-lists/field-list-auto\";\n\nexport type FieldAutoProps = FieldRootProps;\n\nexport function FieldAuto(props: FieldAutoProps) {\n  const { fieldSchema: field, form } = props;\n  if (field.props.isList) return <FieldListAuto {...props} />;\n  if (field.props.type == \"String\") return <FieldString {...props} />;\n  if (field.props.type == \"Boolean\") return <FieldBoolean {...props} />;\n  if (field.props.type == \"Bytes\") return <FieldBytes {...props} />;\n  if (field.props.type == \"DateTime\") return <FieldDateTime {...props} />;\n  if ([\"Int\", \"Float\", \"Decimal\", \"BigInt\"].includes(field.props.type))\n    return <FieldNumber {...props} />;\n  if (field.props.kind === \"enum\") return <FieldEnum {...props} />;\n  if (field.props.kind === \"object\") return <FieldRelationalAuto {...props} />;\n  return <FieldRoot {...props} />;\n}\n"
          },
          {
            "title": "FieldBoolean",
            "description": "",
            "props": {},
            "url": "/auto-form/field-scalars/field-boolean",
            "fileName": "field-boolean.tsx",
            "filePath": "../shared/auto-form/field-scalars/field-boolean.tsx",
            "name": "field-boolean",
            "registryUrl": "https://futurjs.vercel.app/r/field-boolean.json",
            "componentName": "FieldBoolean",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-scalars/field-boolean.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { FieldRoot, FieldRootProps } from \"./field-root\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useId } from \"react\";\n\nexport type FieldBooleanProps = FieldRootProps;\n\nexport function FieldBoolean(props: FieldBooleanProps) {\n  const id = useId();\n  return (\n    <FieldRoot\n      {...props}\n      render={({ field, fieldSchema, form }) => {\n        return (\n          <div className=\"border-input has-data-[state=checked]:border-primary/50 relative flex w-full items-start gap-2 rounded-md border p-4 shadow-xs outline-none\">\n            <Switch\n              id={id}\n              className=\"order-1 h-4 w-6 after:absolute after:inset-0 [&_span]:size-3 data-[state=checked]:[&_span]:translate-x-2 data-[state=checked]:[&_span]:rtl:-translate-x-2\"\n              aria-describedby={`${id}-description`}\n              checked={field.value}\n              defaultChecked={false}\n              onCheckedChange={field.onChange}\n            />\n            <div className=\"grid grow gap-2\">\n              <FormLabel htmlFor={id}>\n                {fieldSchema.props.name}\n                {/* <span className=\"text-muted-foreground text-xs leading-[inherit] font-normal\">\n                  (Sublabel)\n                </span> */}\n              </FormLabel>\n              <p\n                id={`${id}-description`}\n                className=\"text-muted-foreground text-xs\"\n              >\n                <FormDescription>\n                  {fieldSchema.meta?.description}\n                </FormDescription>\n              </p>\n              <FormMessage />\n            </div>\n          </div>\n        );\n      }}\n    />\n  );\n}\n"
          },
          {
            "title": "FieldBytes",
            "description": "",
            "props": {},
            "url": "/auto-form/field-scalars/field-bytes",
            "fileName": "field-bytes.tsx",
            "filePath": "../shared/auto-form/field-scalars/field-bytes.tsx",
            "name": "field-bytes",
            "registryUrl": "https://futurjs.vercel.app/r/field-bytes.json",
            "componentName": "FieldBytes",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-scalars/field-bytes.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { FieldRoot, FieldRootProps } from \"./field-root\";\n\nexport type FieldBytesProps = FieldRootProps;\n\nexport function FieldBytes(props: FieldBytesProps) {\n  return <FieldRoot {...props} />;\n}\n"
          }
        ]
      },
      "field-relationals": {
        "name": "field-relationals",
        "description": "",
        "url": "/auto-form/field-relationals",
        "codeDocs": [
          {
            "title": "FieldRelationalAuto",
            "description": "",
            "props": {},
            "url": "/auto-form/field-relationals/field-relational-auto",
            "fileName": "field-relational-auto.tsx",
            "filePath": "../shared/auto-form/field-relationals/field-relational-auto.tsx",
            "name": "field-relational-auto",
            "registryUrl": "https://futurjs.vercel.app/r/field-relational-auto.json",
            "componentName": "FieldRelationalAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-relationals/field-relational-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { FieldRoot, FieldRootProps } from \"../field-scalars/field-root\";\n\nexport type FieldRelationalAutoProps = FieldRootProps;\n\nexport function FieldRelationalAuto(props: FieldRelationalAutoProps) {\n  return <FieldRoot {...props} />;\n}\n"
          },
          {
            "title": "FieldOneToMany",
            "description": "",
            "props": {},
            "url": "/auto-form/field-relationals/field-one-to-many",
            "fileName": "field-one-to-many.tsx",
            "filePath": "../shared/auto-form/field-relationals/field-one-to-many.tsx",
            "name": "field-one-to-many",
            "registryUrl": "https://futurjs.vercel.app/r/field-one-to-many.json",
            "componentName": "FieldOneToMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-relationals/field-one-to-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldOneToManyProps = {};\n\nexport function FieldOneToMany({}: FieldOneToManyProps) {\n  return <div>FieldOneToMany</div>;\n}\n"
          },
          {
            "title": "FieldManyToMany",
            "description": "",
            "props": {},
            "url": "/auto-form/field-relationals/field-many-to-many",
            "fileName": "field-many-to-many.tsx",
            "filePath": "../shared/auto-form/field-relationals/field-many-to-many.tsx",
            "name": "field-many-to-many",
            "registryUrl": "https://futurjs.vercel.app/r/field-many-to-many.json",
            "componentName": "FieldManyToMany",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-relationals/field-many-to-many.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldManyToManyProps = {};\n\nexport function FieldManyToMany({}: FieldManyToManyProps) {\n  return <div>FieldManyToMany</div>;\n}\n"
          },
          {
            "title": "FieldOneToOne",
            "description": "",
            "props": {},
            "url": "/auto-form/field-relationals/field-one-to-one",
            "fileName": "field-one-to-one.tsx",
            "filePath": "../shared/auto-form/field-relationals/field-one-to-one.tsx",
            "name": "field-one-to-one",
            "registryUrl": "https://futurjs.vercel.app/r/field-one-to-one.json",
            "componentName": "FieldOneToOne",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-relationals/field-one-to-one.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldOneToOneProps = {};\n\nexport function FieldOneToOne({}: FieldOneToOneProps) {\n  return <div>FieldOneToOne</div>;\n}\n"
          },
          {
            "title": "FieldManyToOne",
            "description": "",
            "props": {},
            "url": "/auto-form/field-relationals/field-many-to-one",
            "fileName": "field-many-to-one.tsx",
            "filePath": "../shared/auto-form/field-relationals/field-many-to-one.tsx",
            "name": "field-many-to-one",
            "registryUrl": "https://futurjs.vercel.app/r/field-many-to-one.json",
            "componentName": "FieldManyToOne",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-relationals/field-many-to-one.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldManyToOneProps = {};\n\nexport function FieldManyToOne({}: FieldManyToOneProps) {\n  return <div>FieldManyToOne</div>;\n}\n"
          }
        ]
      },
      "field-lists": {
        "name": "field-lists",
        "description": "",
        "url": "/auto-form/field-lists",
        "codeDocs": [
          {
            "title": "FieldListRelational",
            "description": "",
            "props": {},
            "url": "/auto-form/field-lists/field-list-relational",
            "fileName": "field-list-relational.tsx",
            "filePath": "../shared/auto-form/field-lists/field-list-relational.tsx",
            "name": "field-list-relational",
            "registryUrl": "https://futurjs.vercel.app/r/field-list-relational.json",
            "componentName": "FieldListRelational",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-lists/field-list-relational.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldListRelationalProps = {};\n\nexport function FieldListRelational({}: FieldListRelationalProps) {\n  return <div>FieldListRelational</div>;\n}\n"
          },
          {
            "title": "FieldListRoot",
            "description": "",
            "props": {},
            "url": "/auto-form/field-lists/field-list-root",
            "fileName": "field-list-root.tsx",
            "filePath": "../shared/auto-form/field-lists/field-list-root.tsx",
            "name": "field-list-root",
            "registryUrl": "https://futurjs.vercel.app/r/field-list-root.json",
            "componentName": "FieldListRoot",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-lists/field-list-root.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport type React from \"react\";\nimport { useState, forwardRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  FormControl,\n  FormDescription,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { X, Plus, Edit2, Check, XIcon } from \"lucide-react\";\nimport {\n  FieldRootProps,\n  FieldRootRenderProps,\n  getFieldInfo,\n} from \"../field-scalars/field-root\";\nimport { FieldError } from \"react-hook-form\";\n\nexport type FieldListRootProps = FieldRootRenderProps & {\n  type?: React.InputHTMLAttributes<HTMLInputElement>[\"type\"];\n  convertValue?: (value: any) => any;\n  renderInput?: (props: {\n    value: any;\n    onValueChange: (value: any) => void;\n    name: string;\n    disabled?: boolean;\n    placeholder?: string;\n  }) => React.ReactNode;\n  renderItem?: (props: FieldRootRenderProps) => React.ReactNode;\n};\n\nexport function FieldListRoot(props: FieldListRootProps) {\n  const {\n    fieldSchema,\n    form,\n    field,\n    type,\n    convertValue,\n    renderInput: RenderInput,\n    renderItem: RenderItem,\n  } = props;\n  const [inputValue, setInputValue] = useState<any>();\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\n  const [editValue, setEditValue] = useState(\"\");\n  const allowDuplicates = fieldSchema.meta?.allowDuplicates || true;\n  const maxItems = fieldSchema.meta?.maxItems || 10;\n  const value = (field.value || []) as string[];\n  const { onChange: onChangeValue, onBlur, ref, disabled } = field;\n  console.log(field);\n\n  const onChange = (newValue: string[]) => {\n    if (convertValue) {\n      newValue = newValue.map(convertValue);\n    }\n    onChangeValue(newValue);\n  };\n  const { description, label, name, placeholder, required } = getFieldInfo({\n    fieldSchema,\n    form,\n    field,\n  });\n  const errors = (form.formState.errors[field.name] || []) as FieldError[];\n  const handleAddItem = () => {\n    const _inputValue =\n      typeof inputValue == \"string\" ? String(inputValue).trim() : inputValue;\n    if (typeof inputValue == \"string\" && !_inputValue.length) return;\n    if (disabled) return;\n\n    if (!allowDuplicates && value.includes(_inputValue)) {\n      return;\n    }\n\n    if (maxItems && value.length >= maxItems) {\n      return;\n    }\n\n    const newItems = [...value, _inputValue];\n    onChange?.(newItems);\n    setInputValue(undefined);\n  };\n\n  const handleRemoveItem = (index: number) => {\n    if (disabled) return;\n    const newItems = value.filter((_, i) => i !== index);\n    onChange?.(newItems);\n  };\n\n  const handleStartEdit = (index: number) => {\n    if (disabled) return;\n    setEditingIndex(index);\n    setEditValue(value[index]);\n  };\n\n  const handleSaveEdit = () => {\n    if (!editValue.trim() || editingIndex === null || disabled) return;\n\n    if (\n      !allowDuplicates &&\n      value.includes(editValue.trim()) &&\n      value[editingIndex] !== editValue.trim()\n    ) {\n      return;\n    }\n\n    const newItems = [...value];\n    newItems[editingIndex] = editValue.trim();\n    onChange?.(newItems);\n    setEditingIndex(null);\n    setEditValue(\"\");\n  };\n\n  const handleCancelEdit = () => {\n    setEditingIndex(null);\n    setEditValue(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent, action: \"add\" | \"edit\") => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      if (action === \"add\") {\n        handleAddItem();\n      } else {\n        handleSaveEdit();\n      }\n    }\n  };\n\n  return (\n    <FormItem>\n      {label && (\n        <FormLabel\n          htmlFor={field.name}\n          className={\n            required\n              ? \"after:content-['*'] after:ml-0.5 after:text-red-500\"\n              : \"\"\n          }\n        >\n          {label}\n        </FormLabel>\n      )}\n      <FormControl>\n        <div ref={ref} className=\"space-y-3\" onBlur={onBlur}>\n          {/* Zone d'ajout */}\n          <div className=\"flex gap-2 justify-between\">\n            {RenderInput ? (\n              <div>\n                <RenderInput\n                  value={inputValue}\n                  onValueChange={setInputValue}\n                  name={name}\n                  disabled={disabled}\n                  placeholder={placeholder}\n                />\n              </div>\n            ) : (\n              <Input\n                value={inputValue}\n                id={field.name}\n                onChange={(e) => setInputValue(e.target.value)}\n                placeholder={placeholder}\n                onKeyPress={(e) => handleKeyPress(e, \"add\")}\n                disabled={\n                  disabled || (maxItems ? value.length >= maxItems : false)\n                }\n                name={name}\n                className=\"flex-1\"\n                type={type}\n              />\n            )}\n            <Button\n              type=\"button\"\n              onClick={handleAddItem}\n              disabled={\n                disabled ||\n                !String(inputValue).trim() ||\n                (maxItems ? value.length >= maxItems : false)\n              }\n              size=\"icon\"\n              variant=\"outline\"\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Liste des éléments */}\n          {value.length > 0 && (\n            <div className=\"px-2\">\n              <div className=\"space-y-2 max-h-64 overflow-y-auto border rounded-md p-2 bg-muted/20\">\n                {value.map((item, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center gap-2 p-1.5 border rounded bg-background\"\n                  >\n                    {editingIndex === index ? (\n                      <>\n                        {RenderInput ? (\n                          <RenderInput\n                            value={editValue}\n                            onValueChange={setEditValue}\n                            name={name}\n                            disabled={disabled}\n                            placeholder={placeholder}\n                          />\n                        ) : (\n                          <Input\n                            value={editValue}\n                            onChange={(e) => setEditValue(e.target.value)}\n                            onKeyPress={(e) => handleKeyPress(e, \"edit\")}\n                            className=\"flex-1 h-7 text-sm\"\n                            autoFocus\n                            disabled={disabled}\n                            type={type}\n                          />\n                        )}\n                        <Button\n                          type=\"button\"\n                          onClick={handleSaveEdit}\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-7 w-7 text-green-600 hover:text-green-700\"\n                          disabled={disabled}\n                        >\n                          <Check className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          onClick={handleCancelEdit}\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-7 w-7 text-gray-600 hover:text-gray-700\"\n                          disabled={disabled}\n                        >\n                          <XIcon className=\"h-3 w-3\" />\n                        </Button>\n                      </>\n                    ) : (\n                      <>\n                        <span className=\"flex-1 text-sm truncate px-1\">\n                          {RenderItem ? (\n                            <RenderItem\n                              field={field}\n                              fieldSchema={fieldSchema}\n                              form={form}\n                            />\n                          ) : (\n                            String(item)\n                          )}\n                        </span>\n                        {errors?.[index] && (\n                          <div>\n                            <span className=\"text-red-500 text-xs\">\n                              {errors?.[index]?.message}\n                            </span>\n                          </div>\n                        )}\n                        <Button\n                          type=\"button\"\n                          onClick={() => handleStartEdit(index)}\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-7 w-7 text-blue-600 hover:text-blue-700\"\n                          disabled={disabled}\n                        >\n                          <Edit2 className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          onClick={() => handleRemoveItem(index)}\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-7 w-7 text-red-600 hover:text-red-700\"\n                          disabled={disabled}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Informations complémentaires */}\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {value.length}\n                {maxItems ? `/${maxItems}` : \"\"}\n              </Badge>\n              {maxItems && value.length >= maxItems && (\n                <span className=\"text-amber-600\">Limite atteinte</span>\n              )}\n              <FormMessage />\n            </div>\n            {!allowDuplicates && <span>Doublons non autorisés</span>}\n          </div>\n        </div>\n      </FormControl>\n      {description && <FormDescription>{description}</FormDescription>}\n    </FormItem>\n  );\n}\n"
          },
          {
            "title": "FieldListScalar",
            "description": "",
            "props": {},
            "url": "/auto-form/field-lists/field-list-scalar",
            "fileName": "field-list-scalar.tsx",
            "filePath": "../shared/auto-form/field-lists/field-list-scalar.tsx",
            "name": "field-list-scalar",
            "registryUrl": "https://futurjs.vercel.app/r/field-list-scalar.json",
            "componentName": "FieldListScalar",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-lists/field-list-scalar.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nexport type FieldListScalarProps = {};\n\nexport function FieldListScalar({}: FieldListScalarProps) {\n  return <div>FieldListScalar</div>;\n}\n"
          },
          {
            "title": "FieldListAuto",
            "description": "",
            "props": {},
            "url": "/auto-form/field-lists/field-list-auto",
            "fileName": "field-list-auto.tsx",
            "filePath": "../shared/auto-form/field-lists/field-list-auto.tsx",
            "name": "field-list-auto",
            "registryUrl": "https://futurjs.vercel.app/r/field-list-auto.json",
            "componentName": "FieldListAuto",
            "demo": [],
            "exemples": {},
            "target": "@/shared/auto-form/field-lists/field-list-auto.tsx",
            "dependencies": [],
            "registryDependencies": [],
            "shadcnDependencies": [],
            "registryType": "registry:component",
            "content": "\"use client\";\n\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  FieldRoot,\n  FieldRootProps,\n  getFieldInfo,\n} from \"../field-scalars/field-root\";\nimport { FieldListRoot } from \"./field-list-root\";\nimport { useId } from \"react\";\nimport { Input } from \"@/components/ui/input\";\n\nexport type FieldListAutoProps = FieldRootProps;\n\nexport function FieldListAuto(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  if (field.props.type == \"String\") return <FieldListString {...props} />;\n  if (field.props.type == \"Boolean\") return <FieldListBoolean {...props} />;\n  if (field.props.type == \"Bytes\") return <FieldListBytes {...props} />;\n  if (field.props.type == \"DateTime\") return <FieldListDateTime {...props} />;\n  if ([\"Int\", \"Float\", \"Decimal\", \"BigInt\"].includes(field.props.type))\n    return <FieldListNumber {...props} />;\n  // if (field.props.kind === \"enum\") return <FieldEnum {...props} />;\n  // if (field.props.kind === \"object\") return <FieldRelationalAuto {...props} />;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        const { fieldSchema, form, field } = props;\n        form.formState.errors[field.name];\n        return <FieldListRoot {...props} />;\n      }}\n    />\n  );\n}\n\nfunction FieldListString(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return <FieldListRoot {...props} type=\"text\" />;\n      }}\n    />\n  );\n}\n\nfunction FieldListNumber(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return <FieldListRoot {...props} type=\"number\" convertValue={Number} />;\n      }}\n    />\n  );\n}\n\nfunction FieldListBoolean(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return (\n          <FieldListRoot\n            {...props}\n            convertValue={Boolean}\n            renderInput={({\n              value,\n              onValueChange,\n              name,\n              disabled,\n              placeholder,\n            }) => {\n              return (\n                <div>\n                  {name}\n                  <Input\n                    className=\"order-1 h-4 w-6 after:absolute after:inset-0 [&_span]:size-3 data-[state=checked]:[&_span]:translate-x-2 data-[state=checked]:[&_span]:rtl:-translate-x-2\"\n                    checked={value}\n                    defaultChecked={false}\n                    onChange={(v) => onValueChange(Boolean(v.target.checked))}\n                    name={name}\n                    id={name}\n                    disabled={disabled}\n                  />\n                </div>\n              );\n            }}\n          />\n        );\n      }}\n    />\n  );\n}\nfunction FieldListDateTime(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return (\n          <FieldListRoot\n            {...props}\n            type=\"datetime-local\"\n            convertValue={(v) => new Date(v)}\n          />\n        );\n      }}\n    />\n  );\n}\nfunction FieldListBytes(props: FieldListAutoProps) {\n  const { fieldSchema: field, form } = props;\n  return (\n    <FieldRoot\n      {...props}\n      render={(props) => {\n        return <FieldListRoot {...props} type=\"file\" />;\n      }}\n    />\n  );\n}\n"
          }
        ]
      }
    },
    "url": "/auto-form"
  }
}

	